<?php
class DateFieldTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Date Field',
      'description' => 'Test date field settings and from/to date interaction.',
      'group' => 'Date',
    );
  }

  public function setUp() {
    // Load the date_api module.
    parent::setUp('field', 'field_ui', 'date_api', 'date', 'date_popup', 'date_tools');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer content types', 'administer nodes', 'bypass node access', 'administer date tools'
    ));
    $this->drupalLogin($this->privileged_user);

    variable_set('date_format_long', 'D, m/d/Y - H:i');

    module_load_include('inc', 'node', 'content_types');
    module_load_include('inc', 'node', 'node.pages');
    module_load_include('inc', 'field', 'field.crud');
    module_load_include('inc', 'date', 'date_admin');

  }

  public function testField() {
    $edit = array();
    $edit['name'] = 'Story';
    $edit['type'] = 'story';
    $this->drupalPost('admin/structure/types/add', $edit, t('Save content type'));
    $this->assertText('The content type Story has been added.', 'Content type added.');

    // Create a date field with simple values.
    $values = array('label' => 'Test', 'widget_type' => 'date_select');
    $this->createDateField($values);

    // Create a node with this field.
    $edit = array();
    $this->dateForm('select');
    $this->deleteDateField(); 

  }

  function dateForm($options, $todate = TRUE) {
    // Tests that date field functions properly.
    $edit = array();
    $edit['title'] = $this->randomName(8);
    if ($options == 'select') {
      $edit['field_test[und][0][value][year]'] = '2010';
      $edit['field_test[und][0][value][month]'] = '10';
      $edit['field_test[und][0][value][day]'] = '7';
      $edit['field_test[und][0][value][hour]'] = '10';
      $edit['field_test[und][0][value][minute]'] = '30';
      if ($todate) {
        $edit['field_test[und][0][value2][year]'] = '';
        $edit['field_test[und][0][value2][month]'] = '';
        $edit['field_test[und][0][value2][day]'] = '';
        $edit['field_test[und][0][value2][hour]'] = '11';
        $edit['field_test[und][0][value2][minute]'] = '';
      }
    }
    elseif ($options == 'text') {
      $edit['field_test[und][0][value][date]'] = '10/07/2010 - 10:30';
      if ($todate) {
        $edit['field_test[und][0][value2][date]'] = '10/07/2010 - 11:30';
      }
    }
    elseif ($options == 'popup') {
      $edit['field_test[und][0][value][date]'] = '10/07/2010';
      $edit['field_test[und][0][value][time]'] = '10:30';
      if ($todate) {
        $edit['field_test[und][0][value2][date]'] = '';
        $edit['field_test[und][0][value2][time]'] = '11:30';
      }
    }
    $this->drupalPost('node/add/story', $edit, t('Save'));
    $this->assertText($edit['title'], 'Test node has been created');
    $shouldbe = $todate ? 'Thu, 10/07/2010 - 10:30 - 11:30' : 'Thu, 10/07/2010 - 10:30';
    $this->assertText($shouldbe, "Found the correct date for a datetime field using the $options widget.");
  }

  /**
   * Create a date field from an array of settings values.
   * All values have defaults, only need to specify values that need to be different.
   */
  function createDateField($values = array()) {
    extract($values);

    $field_name = !empty($field_name) ? $field_name : 'field_test';
    $entity_type = !empty($entity_type) ? $entity_type : 'node';
    $bundle = !empty($bundle) ? $bundle : 'story';
    $label = !empty($label) ? $label : 'Test';
    $field_type = !empty($field_type) ? $field_type : 'datetime';
    $repeat = !empty($repeat) ? $repeat : 0;
    $todate = !empty($todate) ? $todate : 'optional';
    $widget_type = !empty($widget_type) ? $widget_type : 'date_select';
    $tz_handling = !empty($tz_handing) ? $tz_handling : 'site';
    $granularity = !empty($granularity) ? $granularity : array('year', 'month', 'day', 'hour', 'minute');
    $year_range = !empty($year_range) ? $year_range : '2010:+1';
    $input_format = !empty($input_format) ? $input_format : date_default_format($widget_type);
    $text_parts = !empty($text_parts) ? $text_parts : array();
    $increment = !empty($increment) ? $increment : 15;
    $default_value = !empty($default_value) ? $default_value : 'now';
    $default_value2 = !empty($default_value2) ? $default_value2 : 'blank';
    $default_format = !empty($default_format) ? $default_format : 'long';

    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => !empty($repeat) ? FIELD_CARDINALITY_UNLIMITED : 1,
      'settings' => array(
        'granularity' => $granularity,
        'tz_handling' => $tz_handling,
        'timezone_db' => date_get_timezone_db($tz_handling),
        'repeat' => $repeat,
        'todate' => $todate,
        ),
    );
    $instance = array(
      'entity_type' => $entity_type,
      'field_name' => $field_name,
      'label' => $label,
      'bundle' => $bundle,
      // Move the date right below the title.
      'weight' => -4,
      'widget' => array(
        'type' => $widget_type,
        // Increment for minutes and seconds, can be 1, 5, 10, 15, or 30.
        'settings' => array(
          'increment' => $increment,
          // The number of years to go back and forward in drop-down year selectors.
          'year_range' => $year_range,

          'input_format' => $input_format,
          'text_parts' => $text_parts,
          'label_position' => 'above',
          'repeat_collapsed' => 0,          
        ),
        'weight' => -4,
      ),
      'settings' => array(
        'default_value' => $default_value, 
        'default_value2' => $default_value2, 
        'default_format' => $default_format,
      )
    );

    $instance['display'] = array(
      'default' => array(
        'label' => 'above',
        'type' => 'date_default',
        'settings' => array(
          'format_type' => $default_format,
          'show_repeat_rule' => 'show',
          'multiple_number' => '',
          'multiple_from' => '',
          'multiple_to' => '',
          'fromto' => 'both',
        ),
        'module' => 'date',
        'weight' => 0 ,
      ),
      'teaser' => array(
        'label' => 'above',
        'type' => 'date_default',
        'weight' => 0,
        'settings' => array(
          'format_type' => $default_format,
          'show_repeat_rule' => 'show',
          'multiple_number' => '',
          'multiple_from' => '',
          'multiple_to' => '',
          'fromto' => 'both',
        ),
        'module' => 'date',
      ),
    );

    $field = field_create_field($field);
    $instance = field_create_instance($instance);

    //_field_info_collate_fields(TRUE);
    field_info_cache_clear(TRUE);
    field_cache_clear(TRUE); 

  }

  function deleteDateField($field_name = 'Test', $bundle = 'story', $bundle_name = 'Story') {
    $this->drupalGet("admin/structure/types/manage/$bundle/fields");
    $this->clickLink('delete');
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText("The field $field_name has been deleted from the $bundle_name content type.", 'Removed date field.');
  }

}
