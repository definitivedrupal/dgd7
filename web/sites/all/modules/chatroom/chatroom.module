<?php

/**
 * @file
 * Enable chat room support in Drupal.
 */

/**
 * Implements hook_permission().
 */
function chatroom_permission() {
  return array(
    'access all chatrooms' => array(
      'title' => t('Access all chat rooms'),
      'description' => t('Allow access to all chat rooms.'),
    ),
  );
}

/**
 * Implements hook_forms().
 */
function chatroom_forms($form_id, $args) {
  $forms = array();
  if (preg_match('/^chatroom_irc_buttons_form_\d+$/', $form_id)) {
    $forms[$form_id] = array(
      'callback' => 'chatroom_irc_buttons_form',
    );
  }
  return $forms;
}

/**
 * Return a list of Chatroom cid's the user has access to.
 */
function chatroom_user_chatroom_list($account) {
  $chatroom_cids = array();

  $cids = db_query('SELECT cid FROM {chatroom} WHERE public = 1 AND archived = 0')->fetchAll();
  foreach ($cids as $cid) {
    $chatroom_cids[] = $cid->cid;
  }

  $rids = array_keys($account->roles);
  $sql = 'SELECT cr.cid
          FROM {chatroom_role} cr
          INNER JOIN {chatroom} c ON c.cid = cr.cid
          WHERE cr.rid IN (:rids)
          AND c.archived = 0';
  $cids = db_query($sql, array(':rids' => $rids))->fetchAll();
  foreach ($cids as $cid) {
    $chatroom_cids[] = $cid->cid;
  }

  $sql = 'SELECT cu.cid
          FROM {chatroom_user} cu
          INNER JOIN {chatroom} c ON c.cid = cu.cid
          WHERE cu.uid = :uid
          AND c.archived = 0';
  $cids = db_query('SELECT cid FROM {chatroom_user} WHERE uid = :uid', array(':uid' => $account->uid))->fetchAll();
  foreach ($cids as $cid) {
    $chatroom_cids[] = $cid->cid;
  }

  return array_unique($chatroom_cids);
}

/**
 * Load a chatroom object for the given $cid.
 */
function chatroom_load($cid) {
  $chatroom = new Chatroom($cid);
  return $chatroom->get('cid') ? $chatroom : FALSE;
}

/**
 * Implements hook_field_widget_form().
 */
function chatroom_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  global $user;

  if (isset($form_state['node'], $form['#node_edit_form'])) {
    if (isset($items[$delta]) && $items[$delta]['chatroom'] instanceof Chatroom) {
      $chatroom = $items[$delta]['chatroom'];
    }
    else {
      $chatroom = new Chatroom();
    }

    $roles = user_roles();
    $read_only_rids = array();
    $read_and_write_rids = array();
    $chatroom_roles = $chatroom->get('allowedRids');
    $admin_role_rid = variable_get('user_admin_role', FALSE);
    foreach ($chatroom_roles as $chatroom_role) {
      if ($chatroom_role->read_only) {
        $read_only_rids[] = $chatroom_role->rid;
      }
      else {
        $read_and_write_rids[] = $chatroom_role->rid;
      }
    }
    if ($admin_role_rid) {
      unset($roles[$admin_role_rid]);
    }

    // Why $gin_form? Because Gin helps me deal with FAPI.
    $gin_form = array(
      'chatroom' => array(
        '#type' => 'fieldset',
        '#title' => 'Chatroom',
        '#collapsible' => TRUE,
        '#description' => t('Add a chatroom'),
        'chatroom_title' => array(
          '#title' => t('Chatroom title'),
          '#type' => 'textfield',
          '#default_value' => $chatroom->get('title'),
        ),
        'chatroom_public' => array(
          '#title' => t('Is this a public chatroom?'),
          '#type' => 'checkbox',
          '#default_value' => $chatroom->get('public'),
        ),
        'chatroom_cid' => array(
          '#type' => 'value',
          '#value' => $chatroom->get('cid'),
        ),
        'chatroom_read_only_roles' => array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Which roles have read-only access to this chatroom'),
          '#options' => $roles,
          '#default_value' => $read_only_rids,
        ),
        'chatroom_write_roles' => array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Which roles can read and post in this chatroom'),
          '#options' => $roles,
          '#default_value' => $read_and_write_rids,
          '#description' => t('Any roles selected here will automatically recieve read access to the chatroom.'),
        ),
      ),
    );
    if ($chatroom->get('cid')) {
      $gin_form['chatroom']['chatroom_archived'] = array(
        '#title' => t('Is this an archived chatroom?'),
        '#type' => 'checkbox',
        '#default_value' => $chatroom->get('archived'),
      );
    }
    if ($formats = filter_formats($user)) {
      $format_options = array();
      foreach ($formats as $format) {
        $format_options[$format->format] = $format->name;
      }
      $gin_form['chatroom']['chatroom_format'] = array(
        '#type' => 'select',
        '#title' => t('Message output format'),
        '#options' => $format_options,
        '#default_value' => $chatroom->get('format'),
      );
    }
    return $gin_form;
  }
}

/**
 * Implements hook_field_schema().
 */
function chatroom_field_schema($field) {
  return array(
    'columns' => array(
      'cid' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_insert().
 */
function chatroom_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  global $user;

  foreach ($items as &$item) {
    $chatroom = new Chatroom();
    $chatroom->set('title', $item['chatroom']['chatroom_title']);
    $chatroom->set('public', $item['chatroom']['chatroom_public']);
    $chatroom->set('uid', $user->uid);
    $allowed_rids = array();
    foreach ($item['chatroom']['chatroom_read_only_roles'] as $rid) {
      $allowed_rids[$rid] = (object) array(
        'rid' => $rid,
        'read_only' => 1,
      );
    }
    // Just overwrite any read-only values for the same role.
    foreach ($item['chatroom']['chatroom_write_roles'] as $rid) {
      $allowed_rids[$rid] = (object) array(
        'rid' => $rid,
        'read_only' => 0,
      );
    }
    $chatroom->set('allowedRids', $allowed_rids);
    if (isset($item['chatroom']['chatroom_format'])) {
      $chatroom->set('format', $item['chatroom']['chatroom_format']);
    }
    if (isset($item['chatroom']['chatroom_archived'])) {
      $chatroom->set('archived', $item['chatroom']['chatroom_archived']);
    }
    $chatroom->save();
    $item['cid'] = $chatroom->get('cid');
  }
}

/**
 * Implements hook_field_update().
 */
function chatroom_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  global $user;

  foreach ($items as &$item) {
    $chatroom = new Chatroom($item['chatroom']['chatroom_cid']);
    $chatroom->set('title', $item['chatroom']['chatroom_title']);
    $chatroom->set('public', $item['chatroom']['chatroom_public']);
    $chatroom->set('uid', $user->uid);
    $allowed_rids = array();
    foreach ($item['chatroom']['chatroom_read_only_roles'] as $rid) {
      $allowed_rids[$rid] = (object) array(
        'rid' => $rid,
        'read_only' => 1,
      );
    }
    // Just overwrite any read-only values for the same role.
    foreach ($item['chatroom']['chatroom_write_roles'] as $rid) {
      $allowed_rids[$rid] = (object) array(
        'rid' => $rid,
        'read_only' => 0,
      );
    }
    $chatroom->set('allowedRids', $allowed_rids);
    if (isset($item['chatroom']['chatroom_format'])) {
      $chatroom->set('format', $item['chatroom']['chatroom_format']);
    }
    $chatroom->set('archived', $item['chatroom']['chatroom_archived']);
    $chatroom->save();
    $item['cid'] = $chatroom->get('cid');
  }
}

/**
 * Implements hook_field_load().
 */
function chatroom_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($items as $entity_id => $list) {
    foreach ($list as $index => $item) {
      $items[$entity_id][$index]['chatroom'] = new Chatroom($item['cid']);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function chatroom_field_is_empty($item, $field) {
}

/**
 * Implements hook_field_formatter_info().
 */
function chatroom_field_formatter_info() {
  return array(
    'chatroom_irc' => array(
      'label' => t('Chatroom IRC formatter'),
      'field types' => array('chatroom'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function chatroom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $user;

  // Add the chatroom js.
  $chatroom =& $items[0]['chatroom'];
  switch ($display['type']) {
    case 'chatroom_irc':
      $name = $user->uid ? $user->name : variable_get('anonymous', t('Anonymous'));
      chatroom_add_js($chatroom);
      nodejs_send_content_channel_token('chatroom_' . $chatroom->get('cid'), TRUE);
      $user_online_message = (object) array(
        'channel' => 'chatroom_' . $chatroom->get('cid'),
        'callback' => 'chatroomUserOnlineHandler',
        'data' => array(
          'cid' => $chatroom->get('cid'),
          'uid' => $user->uid,
          'name' => $name,
        ),
      );
      nodejs_send_content_channel_message($user_online_message);
      return chatroom_field_irc_formatter($entity_type, $entity, $field, $instance, $langcode, $items, $display);
    break;
  }
}

/**
 * Builds a render array for a chatroom field using the IRC formatter.
 */
function chatroom_field_irc_formatter($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $render_array = array();
  foreach ($items as $key => $item) {
    $render_array[$key] = array(
      '#markup' => theme('chatroom_irc', array('chatroom' => $item['chatroom'])),
    );
  }
  return $render_array;
}

/**
 * Implements hook_field_widget_info().
 */
function chatroom_field_widget_info() {
  return array(
    'chatroom_chatroom' => array(
      'label' => t('Chatroom'),
      'field types' => array('chatroom'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function chatroom_field_info() {
  // TODO: enforce cardinality, only allow single field.
  return array(
    'chatroom' => array(
      'label' => t('Chatroom'),
      'description' => t('This references a Chatroom.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'chatroom_reference_widget',
      'default_formatter' => 'chatroom_irc',
    ),
  );
}

/**
 * Implements hook_init().
 */
function chatroom_init() {
  chatroom_add_js();
}

/**
 * Implements hook_menu().
 */
function chatroom_menu() {
  $items = array();
  $items['chatroom/add/chat/ajax'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'chatroom_add_chat_ajax',
    'access arguments' => array('create chatrooom'),
    'type' => MENU_CALLBACK,
  );
  $items['chatroom/add'] = array(
    'title' => 'Create a new chatroom',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chatroom_crud_form'),
    'access arguments' => array('create chatrooom'),
    'type' => MENU_CALLBACK,
  );
  $items['chatroom/edit/%chatroom'] = array(
    'title' => 'Create a new chatroom',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chatroom_crud_form', 2),
    'access arguments' => array('create chatrooom'),
    'type' => MENU_CALLBACK,
  );
  $items['chatroom/message/post/%chatroom'] = array(
    'title' => 'Post a message to the given chatroom',
    'page callback' => 'chatroom_post_message',
    'page arguments' => array(3),
    'access callback' => 'chatroom_user_has_access',
    'access arguments' => array(3, 'write'),
    'type' => MENU_CALLBACK,
  );
  $items['chatroom/%chatroom/messages/previous/%/%'] = array(
    'title' => 'Get previous chat messages.',
    'page callback' => 'chatroom_previous_messages',
    'page arguments' => array(1, 4, 5),
    'access callback' => 'chatroom_user_has_access',
    'access arguments' => array(1, 'read'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Ajax POST handler for creating a chat from javascript.
 */
function chatroom_add_chat_ajax() {
  global $user;

  if (!isset($_POST['formToken'], $_POST['formId']) || !chatroom_check_token($_POST['formToken'], $_POST['formId'])) {
    drupal_json_output(array('data' => array('accessDenied' => 'invalid token')));
    drupal_exit();
  }

  $chatroom_data = isset($_POST['chatroom']) ? $_POST['chatroom'] : array();

  $chatroom_data['uid'] = isset($chatroom_data['uid']) ? $chatroom_data['uid'] : $user->uid;
  if (!isset($chatroom_data['allowedUids']) || !is_array($chatroom_data['allowedUids'])) {
    $chatroom_data['allowedUids'] = array($chatroom_data['uid']);
  }
  elseif (!in_array($chatroom_data['uid'], $chatroom_data['allowedUids'])) {
    $chatroom_data['allowedUids'][] = $chatroom_data['uid'];
  }

  if (isset($chatroom_data['allowedRids']) && !is_array($chatroom_data['allowedRids'])) {
    unset($chatroom_data['allowedRids']);
  }

  if (!isset($chatroom_data['title'])) {
    $chatroom_data['title'] = 'Fix my title';
  }

  if (!isset($chatroom_data['public'])) {
    $chatroom_data['public'] = 0;
  }

  $chatroom = new Chatroom();
  foreach ($chatroom_data as $key => $value) {
    $chatroom->set($key, $value);
  }
  $chatroom->save();
  drupal_json_output(array('data' => array('cid' => $chatroom->get('cid'))));
  drupal_exit();
}

/**
 * Basic crud form.
 *
 * @param mixed $form
 * @param mixed $form_state
 * @param mixed $chatroom
 * @return array
 */
function chatroom_crud_form($form, &$form_state, $chatroom = FALSE) {
  $form_state['chatroom'] = $chatroom ? $chatroom : new Chatroom();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Name of this chatroom',
    '#default_value' => $chatroom ? $chatroom->get('title') : '',
    '#required' => TRUE,
  );
  $form['public'] = array(
    '#type' => 'checkbox',
    '#title' => 'Is this chatroom public?',
    '#default_value' => $chatroom ? $chatroom->get('public') : 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Create chatroom'
  );
  return $form;
}

/**
 * Submit handler for crud from.
 */
function chatroom_crud_form_submit($form, &$form_state) {
  global $user;

  $data = (object) $form_state['values'];
  $chatroom = $form_state['chatroom'];
  $chatroom->set('title', $data->title);
  $chatroom->set('public', $data->public);
  $chatroom->set('uid', $user->uid);
  if (isset($data->format)) {
    $chatroom->set('format', $data->format);
  }
  $chatroom->save();
  drupal_set_message(t('Chatroom %title saved successfully.', array('%title' => $chatroom->get('title'))));
}

/**
 * Add settings to chat page.
 */
function chatroom_add_js($chatroom = NULL) {
  global $user;

  static $initialised;
  if (is_null($initialised)) {
    $initialised = TRUE;

    $js = array(
      'chatroomPath' => url('chatroom'),
      'postMessagePath' => url('chatroom/message/post', array('absolute' => TRUE)),
      'accessDeniedPath' => url('chatroom/access-denied', array('absolute' => TRUE)),
      'createChatPath' => url('chatroom/add/chat/ajax', array('absolute' => TRUE)),
      'createChatToken' => drupal_get_token('chatroom-create-chat'),
      'createChatFormId' => 'chatroom-create-chat',
    );

    if (variable_get('configurable_timezones', 1) && $user->uid && drupal_strlen($user->timezone)) {
      $js['timezone'] = $user->timezone;
    }
    else {
      $js['timezone'] = variable_get('date_default_timezone', 0);
    }

    drupal_add_js(drupal_get_path('module', 'chatroom') . '/chatroom.js', array('weight' => 10));
    drupal_add_css(drupal_get_path('module', 'chatroom') . '/chatroom.css');

    // Allow module to add js files to add functionality to the chatroom interface.
    foreach (module_invoke_all('chatroom_js') as $js_file_path) {
      drupal_add_js($js_file_path);
    }

    // Allow modules to alter the js settings sent down for a chat.
    drupal_alter('chatroom_js_settings', $js);
    drupal_add_js(array('chatroom' => $js), 'setting');
  }

  if ($chatroom instanceof Chatroom) {
    $latest_message = $chatroom->get('latestMessage');
    $previous_message_id = $chatroom->loadPrevMsgId();
    $chatroom_settings = array(
      'cid' => $chatroom->get('cid'),
      'title' => $chatroom->get('title'),
      'latestMsgId' => $latest_message ? $latest_message->cmid : 0,
      'prevMsgId' => $previous_message_id ? $previous_message_id : 0,
    );
    // Allow modules to alter the js for a given room.
    drupal_alter('chatroom_room_settings', $js, $chatroom);
    drupal_add_js(array('chatroom' => array('chats' => array($chatroom->get('cid') => $chatroom_settings))), 'setting');
  }
}

/**
 * Get the time string for a message from a UTC timestamp.
 *
 * @param mixed $timestamp
 * @return string
 */
function chatroom_get_message_time_string($timestamp) {
  $offset_in_hours = chatroom_get_user_timezone_offset() / 60 / 60;
  $offset_in_hours = $offset_in_hours >= 0 ? '+' . $offset_in_hours : $offset_in_hours;
  $date = new DateTime('@' . ($timestamp + chatroom_get_user_timezone_offset()), new DateTimeZone('Etc/GMT' . $offset_in_hours));
  return $date->format(variable_get('chatroom_msg_date_format', 'H:i:s'));
}

/**
 * Check a token for a given form.
 */
function chatroom_check_token($token, $form_id) {
  return $token == drupal_get_token($form_id);
}

/**
 * Checks if $account has access to $chatroom.
 */
function chatroom_user_has_access($chatroom, $access_type = 'read', $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }
  return $chatroom->userHasAccess($account, $access_type);
}

/**
 * Posted messages are handled here.
 */
function chatroom_post_message($chatroom) {
  global $user;

  if (!isset($_POST['message'], $_POST['formToken'], $_POST['formId'])) {
    drupal_json_output(array('data' => array('accessDenied' => 'invalid')));
    drupal_exit();
  }

  if (!chatroom_check_token($_POST['formToken'], $_POST['formId'])) {
    drupal_json_output(array('data' => array('accessDenied' => 'token')));
    drupal_exit();
  }

  $message = array(
    'cid' => $chatroom->get('cid'),
    'uid' => $user->uid,
    'msg' => $_POST['message'],
    'sid' => session_id(),
    'msg_type' => chatroom_get_message_type($_POST['message']),
    'recipient_uid' => 0,
    'modified' => time(),
    'anon_name' => isset($_POST['anonName']) ? $_POST['anonName'] : '',
  );
  if ($message['msg_type'] == 'command') {
    $result = chatroom_call_command($message, $chatroom);
    drupal_json_output(array('data' => array('command' => $message['msg_type'])));
  }
  else {
    $cmid = $chatroom->saveMessage($message);
    $push_message = (object) array(
      'channel' => 'chatroom_' . $chatroom->get('cid'),
      'callback' => 'chatroomMessageHandler',
      'data' => array(
        'cid' => $chatroom->get('cid'),
        'cmid' => $cmid,
        'uid' => $user->uid,
        'timestamp' => $message['modified'],
        'msg' => theme('chatroom_message', array('message' => (object) $message, 'chatroom' => $chatroom)),
      ),
    );
    nodejs_send_content_channel_message($push_message);
    drupal_json_output(array('data' => array('messageCmid' => $cmid)));
  }
  drupal_exit();
}

/**
 * Retrieve previous messages for the given chatroom.
 */
function chatroom_previous_messages($chatroom, $cmid, $limit) {
  $previous_messages = $chatroom->loadPreviousMessages($cmid, $limit);

  $message_data = array();
  foreach ($previous_messages as $previous_message) {
    $message = array(
      'cid' => $previous_message->cid,
      'uid' => $previous_message->uid,
      'msg' => $previous_message->msg,
      'msg_type' => 'message',
      'recipient_uid' => $previous_message->recipient_uid,
      'modified' => $previous_message->modified,
      'anon_name' => $previous_message->anon_name,
      'name' => $previous_message->name,
    );
    $message_data[] = array(
      'cid' => $previous_message->cid,
      'cmid' => $previous_message->cmid,
      'msg' => theme('chatroom_message', array('message' => (object) $message, 'chatroom' => $chatroom)),
    );
  }
  drupal_json_output($message_data);
  drupal_exit();
}

/**
 * Return the current user's offset from UTC.
 */
function chatroom_get_user_timezone_offset() {
  global $user;

  $offset = variable_get('date_default_timezone', 0);
  if (variable_get('configurable_timezones', TRUE) && isset($user->timezone)) {
    $offset = $user->timezone;
  }
  return $offset;
}

/**
 * Try to load a user from a command argument.
 *
 * @param mixed $command_arg
 * @return mixed - A user object or FALSE
 */
function chatroom_get_user_from_command_arg($command_arg) {
  if (is_numeric($command_arg)) {
    return user_load($command_arg);
  }
  else {
    return user_load_by_name($command_arg);
  }
}

/**
 * Try to invoke a command.
 *
 * @param mixed $message
 * @param mixed $chatroom
 */
function chatroom_call_command($message, $chatroom) {
  $commands = module_invoke_all('chatroom_commands');
  $command = chatroom_parse_command($message['msg']);
  if ($command && isset($commands[$command->name])) {
    $callback = $commands[$command->name]['callback'];
    $command->callback_result = call_user_func_array($callback, array($command, $chatroom));
    foreach (module_implements('chatroom_command_api') as $module) {
      call_user_func_array($module . '_chatroom_command_api', array($command, $chatroom));
    }
    return $command->callback_result;
  }
}

/**
 * Parse out the command name and any arguments from a chat message.
 *
 * @param mixed $message
 * @return array
 */
function chatroom_parse_command($message) {
  $command = new stdClass();
  $command->args = array();
  $command->name = FALSE;
  $prefix = variable_get('chatroom_command_prefix', '/');
  if (preg_match("#^$prefix([a-z_0-9]+)(.*)#i", $message, $matches)) {
    $command->name = $matches[1];
    if (isset($matches[2])) {
      $command->args = explode(' ', $matches[2]);
      array_shift($command->args);
    }
  }
  return $command->name ? $command : FALSE;
}

/**
 * Figure out what sort of message this is.
 *
 * @param mixed $message
 * @return void
 */
function chatroom_get_message_type($message) {
  $prefix = variable_get('chatroom_command_prefix', '/');
  if (drupal_substr($message, 0, drupal_strlen($prefix)) == $prefix) {
    return 'command';
  }
  return 'message';
}

/**
 * Implements hook_theme().
 */
function chatroom_theme() {
  return array(
    'chatroom_irc' => array(
      'arguments' => array('chatroom' => NULL),
    ),
    'chatroom_irc_buttons' => array(
      'arguments' => array('chatroom' => NULL),
    ),
    'chatroom_irc_user_list' => array(
      'arguments' => array('chatroom' => NULL),
    ),
    'chatroom_message' => array(
      'arguments' => array('message' => NULL, 'chatroom' => NULL),
    ),
    'chatroom_message_timestamp' => array(
      'arguments' => array('message' => NULL, 'chatroom' => NULL),
    ),
    'chatroom_message_username' => array(
      'arguments' => array('message' => NULL, 'chatroom' => NULL),
    ),
  );
}

/**
 * Theme a chat in the IRC style.
 */
function theme_chatroom_irc($variables) {
  global $user;

  $chatroom = $variables['chatroom'];
  if (!chatroom_user_has_access($chatroom, 'read')) {
    return '';
  }

  $output = '<style type="text/css">#chatroom-board-container-' . $chatroom->get('cid') . ' { width: 100%;}</style>';
  $output .= '<div class="chatroom-board-container" id="chatroom-board-container-' . $chatroom->get('cid') . '">';
  $output .= '<div class="chatroom-user-list" id="chatroom-user-list-' . $chatroom->get('cid') . '">';
  $output .= theme('chatroom_irc_user_list', array('chatroom' => $chatroom));
  $output .= '</div>';
  $output .= '<div class="chatroom-board" id="chatroom-board-' . $chatroom->get('cid') . '" role="log">';
  foreach ($chatroom->loadLatestMessages() as $message) {
    $output .= theme('chatroom_message', array('message' => $message, 'chatroom' => $chatroom));
  }
  $output .= '</div></div>';
  if (!$chatroom->get('archived') && chatroom_user_has_access($chatroom, 'write')) {
    $output .= theme('chatroom_irc_buttons', array('chatroom' => $chatroom));
  }
  return $output;
}

/**
 * Theme chatroom buttons in the IRC style.
 */
function theme_chatroom_irc_user_list($variables) {
  $chatroom = $variables['chatroom'];
  $output = '<div class="chatroom-irc-user-list">';
  $output .= '<ul id="chatroom-irc-user-list-' . $chatroom->get('cid') . '">';
  foreach ($chatroom->getOnlineUsers() as $chat_user) {
    $info = array(
      'account' => $chat_user,
      'name' => $chat_user->name,
      'extra' => '',
      'link_path' => 'user/' . $chat_user->uid,
      'link_options' => array(),
    );
    $output .= '<li id="chatroom-user-' . $chatroom->get('cid') . '-' . $chat_user->uid . '">';
    $output .= theme('username', $info);
    $output .= '</li>';
  }
  $output .= '</ul></div>';
  return $output;
}

/**
 * Theme chatroom buttons in the IRC style.
 */
function theme_chatroom_irc_buttons($variables) {
  $chatroom = $variables['chatroom'];
  $form = drupal_get_form('chatroom_irc_buttons_form_' . $chatroom->get('cid'), $chatroom);
  return '<div class="chatroom-irc-buttons" id="chatroom-chat-buttons-' . $chatroom->get('cid') . '">' . drupal_render($form) . '</div>';
}

/**
 * Theme a chatroom message.
 */
function theme_chatroom_message($variables) {
  $chatroom = $variables['chatroom'];
  $message = $variables['message'];

  $output = '<div class="new-message chatroom-msg">';
  $output .= theme('chatroom_message_timestamp', array('message' => $message, 'chatroom' => $chatroom));
  $output .= ' ' . theme('chatroom_message_username', array('message' => $message, 'chatroom' => $chatroom));
  $output .= ': ' . check_markup($message->msg, $chatroom->get('format'));
  $output .= '</div>';
  return $output;
}

/**
 * Theme a chatroom message's username string.
 */
function theme_chatroom_message_username($variables) {
  $chat_user = $variables['message']->uid ? user_load($variables['message']->uid) : drupal_anonymous_user();
  $output = '<span class="chatroom-message-username">';
  $info = array(
    'account' => $chat_user,
    'name' => $chat_user->name,
    'extra' => '',
    'link_path' => 'user/' . $chat_user->uid,
    'link_options' => array(),
  );
  $output .= theme('username', $info);
  $output .= '</span>';
  return $output;
}

/**
 * Theme a chatroom messages timestamp string.
 *
 * TODO: allow for date format settings on the chatroom.
 */
function theme_chatroom_message_timestamp($variables) {
  $output = '<span class="chatroom-message-date">';
  $output .= chatroom_get_message_time_string($variables['message']->modified);
  $output .= '</span>';
  return $output;
}

/**
 * Form fields for IRC chatroom text entry.
 *
 * @param $form_state
 * @param $chatroom
 * @return array
 */
function chatroom_irc_buttons_form($form, &$form_state, $chatroom) {
  global $user;

  if (!$user->uid && variable_get('chatroom_allow_anon_name', TRUE)) {
    $form['chatroom_anon_name_' . $chatroom->get('cid')] = array(
      '#type' => 'textfield',
      '#title' => t('Enter your name'),
      '#size' => 20,
      '#maxlength' => 256,
    );
  }
  $form['chatroom_form_token_' . $chatroom->get('cid')] = array(
    '#type' => 'hidden',
    '#value' => drupal_get_token('chatroom_form_token_' . $chatroom->get('cid')),
    '#attributes' => array('id' => 'edit-chatroom-chat-buttons-form-token-' . $chatroom->get('cid')),
  );
  $form['chatroom_message_entry_box_' . $chatroom->get('cid')] = array(
    '#type' => 'textarea',
    '#title' => t('Enter your message text here'),
    '#size' => 50,
    '#rows' => 1,
    '#maxlength' => variable_get('chatroom_max_message_size', 1000),
  );
  $form['chatroom_message_entry_submit_' . $chatroom->get('cid')] = array(
    '#type' => 'submit',
    '#value' => t('Chat'),
  );
  return $form;
}

/**
 * Implements hook_field_delete().
 */
function chatroom_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $item) {
    $tables = db_find_tables('chatroom%');
    foreach ($tables as $table) {
      $sql = 'DELETE FROM {' . $table . '} WHERE cid = :cid';
      db_query($sql, array(':cid' => $item['cid']));
    }
  }
}

