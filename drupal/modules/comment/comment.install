<?php
// $Id: comment.install,v 1.67 2010/05/23 19:10:22 dries Exp $

/**
 * @file
 * Install, update and uninstall functions for the comment module.
 */

/**
 * Implements hook_uninstall().
 */
function comment_uninstall() {
  // Delete comment_body field.
  field_delete_field('comment_body');

  // Remove variables.
  variable_del('comment_block_count');
  $node_types = array_keys(node_type_get_types());
  foreach ($node_types as $node_type) {
    variable_del('comment_' . $node_type);
    variable_del('comment_anonymous_' . $node_type);
    variable_del('comment_controls_' . $node_type);
    variable_del('comment_default_mode_' . $node_type);
    variable_del('comment_default_order_' . $node_type);
    variable_del('comment_default_per_page_' . $node_type);
    variable_del('comment_form_location_' . $node_type);
    variable_del('comment_preview_' . $node_type);
    variable_del('comment_subject_field_' . $node_type);
  }
}

/**
 * Implements hook_enable().
 */
function comment_enable() {
  // Insert records into the node_comment_statistics for nodes that are missing.
  $query = db_select('node', 'n');
  $query->leftJoin('node_comment_statistics', 'ncs', 'ncs.nid = n.nid');
  $query->addField('n', 'created', 'last_comment_timestamp');
  $query->addField('n', 'uid', 'last_comment_uid');
  $query->addField('n', 'nid');
  $query->addExpression('0', 'comment_count');
  $query->addExpression('NULL', 'last_comment_name');
  $query->isNull('ncs.comment_count');

  db_insert('node_comment_statistics')
    ->from($query)
    ->execute();

  // Create comment body field.
  // @todo this should be done in comment_install, but causes exceptions
  // in testing because the list of fields types is not available in
  // hook_install(): _field_info_collate_types() returns an empty array.
  if (!field_info_field('comment_body')) {
    $field = array(
      'field_name' => 'comment_body',
      'type' => 'text_long',
      'entity_types' => array('comment'),
    );
    field_create_field($field);
  }

  // There is a separate comment bundle for each node type to allow for
  // per-node-type customization of comment fields. Each one of these bundles
  // needs a comment body field instance. A comment bundle is needed even for
  // node types whose comments are disabled by default, because individual nodes
  // may override that default.
  // @todo This should be changed to call field_attach_create_bundle() instead,
  //   and a comment_field_attach_create_bundle() function should be added to
  //   handle the creation of the comment body field instance.
  foreach (node_type_get_types() as $type => $info) {
    if (!isset($info->is_new) && !isset($info->disabled) && !field_info_instance('comment', 'comment_body', 'comment_node_' . $info->type)) {
      _comment_body_field_instance_create($info);
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function comment_update_dependencies() {
  // Comment update 7005 creates comment Field API bundles and therefore must
  // run after the Field module has been enabled, but before upgrading field
  // data.
  $dependencies['comment'][7005] = array(
    'system' => 7049,
  );
  $dependencies['system'][7050] = array(
    'comment' => 7005,
  );

  // Comment update 7012 creates the comment body field and therefore must run
  // after all entities have been updated.
  $dependencies['comment'][7012] = array(
    'system' => 7021,
  );

  return $dependencies;
}

/**
 * @defgroup updates-6.x-to-7.x Comment updates from 6.x to 7.x
 * @{
 */

/**
 * Remove comment settings for page ordering.
 */
function comment_update_7000() {
  $types = node_type_get_types();
  foreach ($types as $type => $object) {
    variable_del('comment_default_order' . $type);
  }
  return t('Comment order settings removed.');
}

/**
 * Change comment status from published being 0 to being 1
 */
function comment_update_7001() {
  $changes = array(
    3 => 0,
    0 => 1,
    1 => 3,
  );

  foreach ($changes as $old => $new) {
  db_update('comments')
    ->fields(array('status' => $new))
    ->condition('status', $old)
    ->execute();
  }
}

/**
 * Rename {comments} table to {comment}.
 */
function comment_update_7002() {
  db_rename_table('comments', 'comment');
}

/**
 * Rename comment display setting variables.
 */
function comment_update_7004() {
  $types = node_type_get_types();
  foreach ($types as $type => $object) {
    $setting = variable_get('comment_default_mode_' . $type, 4);
    if ($setting == 3 || $setting == 4) {
      variable_set('comment_default_mode_' . $type, 1);
    }
    else {
      variable_set('comment_default_mode_' . $type, 0);
    }
  }
}

/**
 * Create comment Field API bundles.
 */
function comment_update_7005() {
  foreach (node_type_get_types() as $info) {
    field_attach_create_bundle('comment', 'comment_node_' . $info->type);
  }
}

/**
 * Create user related indexes.
 */
function comment_update_7006() {
  db_add_index('comment', 'comment_uid', array('uid'));
  db_add_index('node_comment_statistics', 'last_comment_uid', array('last_comment_uid'));
}

/**
 * Split {comment}.timestamp into 'created' and 'changed', improve indexing on {comment}.
 */
function comment_update_7007() {
  // Drop the old indexes.
  db_drop_index('comment', 'status');
  db_drop_index('comment', 'pid');

  // Create a created column.
  db_add_field('comment', 'created', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  // Rename the timestamp column to changed.
  db_change_field('comment', 'timestamp', 'changed', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  // Migrate the data.
  // @todo db_update() should support this.
  db_query('UPDATE {comment} SET created = changed');

  // Recreate the indexes.
  // The 'comment_num_new' index is optimized for comment_num_new()
  // and comment_new_page_count().
  db_add_index('comment', 'comment_num_new', array('nid', 'status', 'created', 'cid', 'thread'));
  db_add_index('comment', 'comment_pid_status', array('pid', 'status'));
}

/**
 * Add language column to the {comment} table.
 */
function comment_update_7008() {
  // Create a language column.
  db_add_field('comment', 'language', array(
    'type' => 'varchar',
    'length' => 12,
    'not null' => TRUE,
    'default' => '',
  ));

  // Create the index.
  db_add_index('comment', 'comment_nid_language', array('nid', 'language'));
}

/**
 * Update preview setting variable to use new constants
 */
function comment_update_7009() {
  foreach (node_type_get_types() as $type => $object) {
    // There were only two comment modes in the past:
    // - 1 was 'required' previously, convert into DRUPAL_REQUIRED (2).
    // - 0 was 'optional' previously, convert into DRUPAL_OPTIONAL (1).
    $original_preview = variable_get('comment_preview_' . $type, 1);
    if ($original_preview) {
      $preview = DRUPAL_REQUIRED;
    }
    else {
      $preview = DRUPAL_OPTIONAL;
    }
    variable_set('comment_preview_' . $type, $preview);
  }
  return array();
}

/**
 * Add {node_comment_statistics}.cid column.
 */
function comment_update_7010() {
  db_add_field('node_comment_statistics', 'cid', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'The {comment}.cid of the last comment.',
  ));
  db_add_index('node_comment_statistics', 'cid', array('cid'));
}

/**
 * Add an index to node_comment_statistics on comment_count.
 */
function comment_update_7011() {
  db_add_index('node_comment_statistics', 'comment_count', array('comment_count'));
}

/**
 * Create the comment_body field.
 */
function comment_update_7012() {
  // Create comment body field.
  $field = array(
    'field_name' => 'comment_body',
    'type' => 'text_long',
    'entity_types' => array('comment'),
  );
  field_create_field($field);

  // Add the field to comments for all existing bundles.
  $body_instance = array(
    'field_name' => 'comment_body',
    'label' => 'Comment',
    'entity_type' => 'comment',
    'settings' => array('text_processing' => 1),
    'required' => TRUE,
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
  );
  foreach (node_type_get_types() as $info) {
    $body_instance['bundle'] = 'comment_node_' . $info->type;
    field_create_instance($body_instance);
  }
}

/**
 * Migrate data from the comment field to field storage.
 */
function comment_update_7013(&$sandbox) {
  // This is a multipass update. First set up some comment variables.
  if (empty($sandbox['total'])) {
    $comments = (bool) db_query_range('SELECT 1 FROM {comment}', 0, 1)->fetchField();
    $sandbox['types'] = array();
    if ($comments) {
      $sandbox['etid'] = _field_sql_storage_etid('comment');
      $sandbox['types'] = node_type_get_types();
    }
    $sandbox['total'] = count($sandbox['types']);
  }

  if (!empty($sandbox['types'])) {
    $type = array_shift($sandbox['types']);

    $query = db_select('comment', 'c');
    $query->innerJoin('node', 'n', 'c.nid = n.nid AND n.type = :type', array(':type' => $type->type));
    $query->addField('c', 'cid', 'entity_id');
    $query->addExpression("'comment_node_$type->type'", 'bundle');
    $query->addExpression($sandbox['etid'], 'etid');
    $query->addExpression('0', 'deleted');
    $query->addExpression("'" . LANGUAGE_NONE . "'", 'language');
    $query->addExpression('0', 'delta');
    $query->addField('c', 'comment', 'comment_body_value');
    $query->addField('c', 'format', 'comment_body_format');

    $comment_body = field_info_field('comment_body');
    $comment_body_table = _field_sql_storage_tablename($comment_body);

    db_insert($comment_body_table)
      ->from($query)
      ->execute();
    // Update the comment body format in a similar manner as is done for other
    // modules in filter_update_7005(), but we do this one here since we are
    // already migrating the data.
    db_update($comment_body_table)
      ->fields(array('comment_body_format' => variable_get('filter_default_format', 1)))
      ->condition('comment_body_format', 0)
      ->execute();

    $sandbox['#finished'] = 1 - count($sandbox['types']) / $sandbox['total'];
  }

  // On the last pass of the update, $sandbox['types'] will be empty.
  if (empty($sandbox['types'])) {
    db_drop_field('comment', 'comment');
    db_drop_field('comment', 'format');
  }
}

/**
 * @} End of "defgroup updates-6.x-to-7.x"
 * The next series of updates should start at 8000.
 */

/**
 * Implements hook_schema().
 */
function comment_schema() {
  $schema['comment'] = array(
    'description' => 'Stores comments and associated data.',
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique comment ID.',
      ),
      'pid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {comment}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid to which this comment is a reply.',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',
      ),
      'subject' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The comment title.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "The author's host name.",
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was last edited, as a Unix timestamp.',
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'The published status of a comment. (0 = Not Published, 1 = Published)',
      ),
      'thread' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => "The vancode representation of the comment's place in a thread.",
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'homepage' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'language' => array(
        'description' => 'The {languages}.language of this comment.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'comment_status_pid' => array('pid', 'status'),
      'comment_num_new' => array('nid', 'status', 'created', 'cid', 'thread'),
      'comment_uid' => array('uid'),
      'comment_nid_language' => array('nid', 'language'),
    ),
    'primary key' => array('cid'),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['node_comment_statistics'] = array(
    'description' => 'Maintains statistics of node and comments posts to show "new" and "updated" flags.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid for which the statistics are compiled.',
      ),
      'cid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {comment}.cid of the last comment.',
      ),
      'last_comment_timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp of the last comment that was posted within this node, from {comment}.timestamp.',
      ),
      'last_comment_name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => 'The name of the latest author to post a comment on this node, from {comment}.name.',
      ),
      'last_comment_uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The user ID of the latest author to post a comment on this node, from {comment}.uid.',
      ),
      'comment_count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The total number of comments on this node.',
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'node_comment_timestamp' => array('last_comment_timestamp'),
      'comment_count' => array('comment_count'),
      'last_comment_uid' => array('last_comment_uid'),
    ),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'last_comment_uid' => array('users' => 'uid'),
    ),
  );

  return $schema;
}
