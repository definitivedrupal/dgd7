<?php
// $Id: list.module,v 1.38 2010/12/01 07:11:37 webchick Exp $

/**
 * @file
 * Defines list field types that can be used with the Options module.
 */

/**
 * Implements hook_help().
 */
function list_help($path, $arg) {
  switch ($path) {
    case 'admin/help#list':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The List module defines various fields for storing a list of items, for use with the Field module. Usually these items are entered through a select list, checkboxes, or radio buttons. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function list_field_info() {
  return array(
    'list' => array(
      'label' => t('List'),
      'description' => t('This field stores numeric keys from key/value lists of allowed values where the key is a simple alias for the position of the value, i.e. 0|First option, 1|Second option, 2|Third option.'),
      'settings' => array('allowed_values' => '', 'allowed_values_function' => ''),
      'default_widget' => 'options_select',
      'default_formatter' => 'list_default',
    ),
    'list_boolean' => array(
      'label' => t('Boolean'),
      'description' => t('This field stores simple on/off or yes/no options.'),
      'settings' => array('allowed_values' => '', 'allowed_values_function' => ''),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'list_default',
    ),
    'list_number' => array(
      'label' => t('List (numeric)'),
      'description' => t('This field stores keys from key/value lists of allowed numbers where the stored numeric key has significance and must be preserved, i.e. \'Lifetime in days\': 1|1 day, 7|1 week, 31|1 month.'),
      'settings' => array('allowed_values' => '', 'allowed_values_function' => ''),
      'default_widget' => 'options_select',
      'default_formatter' => 'list_default',
    ),
    'list_text' => array(
      'label' => t('List (text)'),
      'description' => t('This field stores keys from key/value lists of allowed values where the stored key has significance and must be a varchar, i.e. \'US States\': IL|Illinois, IA|Iowa, IN|Indiana'),
      'settings' => array('allowed_values' => '', 'allowed_values_function' => ''),
      'default_widget' => 'options_select',
      'default_formatter' => 'list_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 *
 * @todo: If $has_data, add a form validate function to verify that the
 * new allowed values do not exclude any keys for which data already
 * exists in the field storage (use EntityFieldQuery to find out).
 * Implement the validate function via hook_field_update_forbid() so
 * list.module does not depend on form submission.
 */
function list_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['allowed_values'] = array(
    '#type' => 'textarea',
    '#title' => t('Allowed values list'),
    '#default_value' => $settings['allowed_values'],
    '#required' => FALSE,
    '#rows' => 10,
    '#description' => '<p>' . t('The possible values this field can contain. Enter one value per line, in the format key|label. The key is the value that will be stored in the database, and must be a %type value. The label is optional, and the key will be used as the label if no label is specified.', array('%type' => $field['type'] == 'list_text' ? t('text') : t('numeric'))) . '</p>',
    '#element_validate' => array('list_allowed_values_setting_validate'),
    '#list_field_type' => $field['type'],
    '#access' => empty($settings['allowed_values_function']),
  );

  if ($field['type'] == 'list_boolean') {
    $values = list_extract_allowed_values($settings['allowed_values']);
    $off_value = array_shift($values);
    $on_value = array_shift($values);
    $form['allowed_values'] = array(
      '#type' => 'value',
      '#description' => '',
      '#value_callback' => 'list_boolean_allowed_values_callback',
      '#access' => empty($settings['allowed_values_function']),
    );
    $form['allowed_values']['on'] = array(
      '#type' => 'textfield',
      '#title' => t('On value'),
      '#default_value' => $on_value,
      '#required' => FALSE,
      '#description' => t('If left empty, "1" will be used.'),
      // Change #parents to make sure the element is not saved into field
      // settings.
      '#parents' => array('on'),
    );
    $form['allowed_values']['off'] = array(
      '#type' => 'textfield',
      '#title' => t('Off value'),
      '#default_value' => $off_value,
      '#required' => FALSE,
      '#description' => t('If left empty, "0" will be used.'),
      // Change #parents to make sure the element is not saved into field
      // settings.
      '#parents' => array('off'),
    );
    // Link the allowed value to the on / off elements to prepare for the rare
    // case of an alter changing #parents.
    $form['allowed_values']['#on_parents'] = &$form['allowed_values']['on']['#parents'];
    $form['allowed_values']['#off_parents'] = &$form['allowed_values']['off']['#parents'];
  }

  // Alter the description for allowed values depending on the widget type.
  if ($instance['widget']['type'] == 'options_onoff') {
    $form['allowed_values']['#description'] .= '<p>' . t("For a 'single on/off checkbox' widget, define the 'off' value first, then the 'on' value in the <strong>Allowed values</strong> section. Note that the checkbox will be labeled with the label of the 'on' value.") . '</p>';
  }
  elseif ($instance['widget']['type'] == 'options_buttons') {
    $form['allowed_values']['#description'] .= '<p>' . t("The 'checkboxes/radio buttons' widget will display checkboxes if the <em>Number of values</em> option is greater than 1 for this field, otherwise radios will be displayed.") . '</p>';
  }
  $form['allowed_values']['#description'] .= t('Allowed HTML tags in labels: @tags', array('@tags' => _field_filter_xss_display_allowed_tags()));

  $form['allowed_values_function'] = array(
    '#type' => 'value',
    '#value' => $settings['allowed_values_function'],
  );
  $form['allowed_values_function_display'] = array(
    '#type' => 'item',
    '#title' => t('Allowed values list'),
    '#markup' => t('The value of this field is being determined by the %function function and may not be changed.', array('%function' => $settings['allowed_values_function'])),
    '#access' => !empty($settings['allowed_values_function']),
  );

  return $form;
}

/**
 * Element validate callback; check that the entered values are valid.
 */
function list_allowed_values_setting_validate($element, &$form_state) {
  $values = list_extract_allowed_values($element['#value'], $element['#list_field_type'] == 'list');
  $field_type = $element['#list_field_type'];

  // Check that keys are valid for the field type.
  foreach ($values as $key => $value) {
    if ($field_type == 'list_number' && !is_numeric($key)) {
      form_error($element, t('Allowed values list: each key must be a valid integer or decimal.'));
      break;
    }
    elseif ($field_type == 'list_text' && drupal_strlen($key) > 255) {
      form_error($element, t('Allowed values list: each key must be a string at most 255 characters long.'));
      break;
    }
    elseif ($field_type == 'list' && !preg_match('/^-?\d+$/', $key)) {
      form_error($element, t('Allowed values list: keys must be integers.'));
      break;
    }
  }
}

/**
* Form element #value_callback: assembles the allowed values for 'boolean' fields.
*/
function list_boolean_allowed_values_callback($element, $input, $form_state) {
  $on = drupal_array_get_nested_value($form_state['input'], $element['#on_parents']);
  $off = drupal_array_get_nested_value($form_state['input'], $element['#off_parents']);
  return "0|$off\n1|$on";
}

/**
 * Implements hook_field_update_field().
 */
function list_field_update_field($field, $prior_field, $has_data) {
  drupal_static_reset('list_allowed_values');
}

/**
 * Returns the set of allowed values for a list field.
 *
 * The strings are not safe for output. Keys and values of the array should be
 * sanitized through field_filter_xss() before being displayed.
 *
 * @param $field
 *   The field definition.
 *
 * @return
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (integer or text), values of the array are the display aliases.
 */
function list_allowed_values($field) {
  $allowed_values = &drupal_static(__FUNCTION__, array());

  if (!isset($allowed_values[$field['id']])) {
    $values = array();

    $function = $field['settings']['allowed_values_function'];
    if (!empty($function) && function_exists($function)) {
      $values = $function($field);
    }
    elseif (!empty($field['settings']['allowed_values'])) {
      $position_keys = $field['type'] == 'list';
      $values = list_extract_allowed_values($field['settings']['allowed_values'], $position_keys);
    }

    $allowed_values[$field['id']] = $values;
  }

  return $allowed_values[$field['id']];
}

/**
 * Generates an array of values from a string.
 *
 * Explode a string with keys and labels separated with '|' and with each new
 * value on its own line.
 *
 * @param $string_values
 *   The list of choices as a string, in the format expected by the
 *   'allowed_values' setting:
 *    - Values are separated by a carriage return.
 *    - Each value is in the format "value|label" or "value".
 * @param $position_keys
 *   Boolean value indicating whether to generate keys based on the position of
 *   the value if a key is not manually specified, effectively generating
 *   integer-based keys. This should only be TRUE for fields that have a type of
 *   "list". Otherwise the value will be used as the key if not specified.
 */
function list_extract_allowed_values($string_values, $position_keys = FALSE) {
  $values = array();

  $list = explode("\n", $string_values);
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');
  foreach ($list as $key => $value) {
    // Check for a manually specified key.
    if (strpos($value, '|') !== FALSE) {
      list($key, $value) = explode('|', $value);
    }
    // Otherwise see if we need to use the value as the key. The "list" type
    // will automatically convert non-keyed lines to integers.
    elseif (!$position_keys) {
      $key = $value;
    }
    $values[$key] = (isset($value) && $value !== '') ? $value : $key;
  }

  return $values;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'list_illegal_value': The value is not part of the list of allowed values.
 */
function list_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $allowed_values = list_allowed_values($field);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!empty($allowed_values) && !isset($allowed_values[$item['value']])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'list_illegal_value',
          'message' => t('%name: illegal value.', array('%name' => t($instance['label']))),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function list_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * The List module does not implement widgets of its own, but reuses the
 * widgets defined in options.module.
 *
 * @see list_options_list()
 */
function list_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('list', 'list_text', 'list_number'),
    'options_buttons' => array('list', 'list_text', 'list_number', 'list_boolean'),
    'options_onoff' => array('list_boolean'),
  );

  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_options_list().
 */
function list_options_list($field) {
  return list_allowed_values($field);
}

/**
 * Implements hook_field_formatter_info().
 */
function list_field_formatter_info() {
  return array(
    'list_default' => array(
      'label' => t('Default'),
      'field types' => array('list', 'list_boolean', 'list_text', 'list_number'),
    ),
    'list_key' => array(
      'label' => t('Key'),
      'field types' => array('list', 'list_boolean', 'list_text', 'list_number'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function list_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'list_default':
      $allowed_values = list_allowed_values($field);
      foreach ($items as $delta => $item) {
        if (isset($allowed_values[$item['value']])) {
          $output = field_filter_xss($allowed_values[$item['value']]);
        }
        else {
          // If no match was found in allowed values, fall back to the key.
          $output = field_filter_xss($item['value']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'list_key':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => field_filter_xss($item['value']));
      }
      break;
  }

  return $element;
}
