<?php
// $Id: update_test.module,v 1.4 2009/12/04 16:49:47 dries Exp $

/**
 * Implements hook_menu().
 */
function update_test_menu() {
  $items = array();

  $items['update-test'] = array(
    'title' => t('Update test'),
    'page callback' => 'update_test_mock_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_system_info_alter().
 *
 * This checks the 'update_test_system_info' variable and sees if we need to
 * alter the system info for the given $file based on the setting. The setting
 * is expected to be a nested associative array. If the key '#all' is defined,
 * its subarray will include .info keys and values for all modules and themes
 * on the system. Otherwise, the settings array is keyed by the module or
 * theme short name ($file->name) and the subarrays contain settings just for
 * that module or theme.
 */
function update_test_system_info_alter(&$info, $file) {
  $setting = variable_get('update_test_system_info', array());
  foreach (array('#all', $file->name) as $id) {
    if (!empty($setting[$id])) {
      foreach ($setting[$id] as $key => $value) {
        $info[$key] = $value;
      }
    }
  }
}

/**
 * Page callback, prints mock XML for the update module.
 *
 * The specific XML file to print depends on two things: the project we're
 * trying to fetch data for, and the desired "availability scenario" for that
 * project which we're trying to test. Before attempting to fetch this data
 * (by checking for updates on the available updates report), callers need to
 * define the 'update_test_xml_map' variable as an array, keyed by project
 * name, indicating which availability scenario to use for that project.
 *
 * @param $project_name
 *   The project short name update.module is trying to fetch data for (the
 *   fetch URLs are of the form: [base_url]/[project_name]/[core_version]).
 */
function update_test_mock_page($project_name) {
  $xml_map = variable_get('update_test_xml_map', FALSE);
  if (isset($xml_map[$project_name])) {
    $availability_scenario = $xml_map[$project_name];
  }
  elseif (isset($xml_map['#all'])) {
    $availability_scenario = $xml_map['#all'];
  }
  else {
    // The test didn't specify (for example, the webroot has other modules and
    // themes installed but they're disabled by the version of the site
    // running the test. So, we default to a file we know won't exist, so at
    // least we'll get an empty page from readfile instead of a bunch of
    // Drupal page output.
    $availability_scenario = '#broken#';
  }

  $path = drupal_get_path('module', 'update_test');
  readfile("$path/$project_name.$availability_scenario.xml");
}
