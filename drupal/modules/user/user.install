<?php
// $Id: user.install,v 1.54 2010/06/28 14:59:24 webchick Exp $

/**
 * @file
 * Install, update and uninstall functions for the user module.
 */

/**
 * Implements hook_schema().
 */
function user_schema() {
  $schema['authmap'] = array(
    'description' => 'Stores distributed authentication mapping.',
    'fields' => array(
      'aid' => array(
        'description' => 'Primary Key: Unique authmap ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'authname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique authentication name.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Module which is controlling the authentication.',
      ),
    ),
    'unique keys' => array(
      'authname' => array('authname'),
    ),
    'primary key' => array('aid'),
    'foreign keys' => array(
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['role_permission'] = array(
    'description' => 'Stores the permissions assigned to user roles.',
    'fields' => array(
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Foreign Key: {role}.rid.',
      ),
      'permission' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'A single permission granted to the role identified by rid.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The module declaring the permission.",
      ),
    ),
    'primary key' => array('rid', 'permission'),
    'indexes' => array(
      'permission' => array('permission'),
    ),
    'foreign keys' => array(
      'rid' => array('role' => 'rid'),
    ),
  );

  $schema['role'] = array(
    'description' => 'Stores user roles.',
    'fields' => array(
      'rid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique role ID.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique role name.',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this role in listings and the user interface.',
      ),
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('rid'),
    'indexes' => array(
      'name_weight' => array('name', 'weight'),
    ),
  );

  $schema['users'] = array(
    'description' => 'Stores user data.',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique user ID.',
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ),
      'pass' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (hashed).",
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => "User's e-mail address.",
      ),
      'theme' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's default theme.",
      ),
      'signature' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's signature.",
      ),
      'signature_format' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {filter_format}.format of the signature.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when user was created.',
      ),
      'access' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for previous time user accessed the site.',
      ),
      'login' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Timestamp for user's last login.",
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the user is active(1) or blocked(0).',
      ),
      'timezone' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'description' => "User's time zone.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's default language.",
      ),
      'picture' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Foreign key: {file_managed}.fid of user's picture.",
      ),
      'init' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => 'E-mail address used for initial account creation.',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
      ),
    ),
    'indexes' => array(
      'access' => array('access'),
      'created' => array('created'),
      'mail' => array('mail'),
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('uid'),
    'foreign keys' => array(
      'signature_format' => array('filter_format' => 'format'),
    ),
  );

  $schema['users_roles'] = array(
    'description' => 'Maps users to roles.',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: {users}.uid for user.',
      ),
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: {role}.rid for role.',
      ),
    ),
    'primary key' => array('uid', 'rid'),
    'indexes' => array(
      'rid' => array('rid'),
    ),
    'foreign keys' => array(
      'uid' => array('users' => 'uid'),
      'rid' => array('role' => 'rid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function user_install() {
  // Insert a row for the anonymous user.
  db_insert('users')
    ->fields(array(
      'uid' => 0,
      'name' => '',
      'mail' => '',
    ))
    ->execute();

  // We need some placeholders here as name and mail are uniques and data is
  // presumed to be a serialized array. This will be changed by the settings
  // form in the installer.
  db_insert('users')
    ->fields(array(
      'uid' => 1,
      'name' => 'placeholder-for-uid-1',
      'mail' => 'placeholder-for-uid-1',
      'created' => REQUEST_TIME,
      'status' => 1,
      'data' => NULL,
    ))
    ->execute();

  // Built-in roles.
  $rid_anonymous = db_insert('role')
    ->fields(array('name' => 'anonymous user', 'weight' => 0))
    ->execute();
  $rid_authenticated = db_insert('role')
    ->fields(array('name' => 'authenticated user', 'weight' => 1))
    ->execute();

  // Sanity check to ensure the anonymous and authenticated role IDs are the
  // same as the drupal defined constants. In certain situations, this will
  // not be true.
  if ($rid_anonymous != DRUPAL_ANONYMOUS_RID) {
    db_update('role')
      ->fields(array('rid' => DRUPAL_ANONYMOUS_RID))
      ->condition('rid', $rid_anonymous)
      ->execute();
  }
  if ($rid_authenticated != DRUPAL_AUTHENTICATED_RID) {
    db_update('role')
      ->fields(array('rid' => DRUPAL_AUTHENTICATED_RID))
      ->condition('rid', $rid_authenticated)
      ->execute();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function user_update_dependencies() {
  // Run all the critical user upgrades before everything.
  $dependencies['system'][7000] = array(
    'user' => 7008,
  );
  // user_update_7006 relies on filter_update_7002.
  // TODO: move user_update_7006 down below in the upgrade process.
  $dependencies['user'][7006] = array(
    'filter' => 7002,
  );

  return $dependencies;
}

/**
 * @defgroup user-updates-6.x-to-7.x User updates from 6.x to 7.x
 * @{
 */

/**
 * Increase the length of the password field to accommodate better hashes.
 *
 * Also re-hashes all current passwords to improve security. This may be a
 * lengthy process, and is performed batch-wise.
 */
function user_update_7000(&$sandbox) {
  $sandbox['#finished'] = 0;
  // Lower than DRUPAL_HASH_COUNT to make the update run at a reasonable speed.
  $hash_count_log2 = 11;
  // Multi-part update.
  if (!isset($sandbox['user_from'])) {
    db_change_field('users', 'pass', 'pass', array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''));
    $sandbox['user_from'] = 0;
    $sandbox['user_count'] = db_query("SELECT COUNT(uid) FROM {users}")->fetchField();
  }
  else {
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    //  Hash again all current hashed passwords.
    $has_rows = FALSE;
    // Update this many per page load.
    $count = 1000;
    $result = db_query_range("SELECT uid, pass FROM {users} WHERE uid > 0 ORDER BY uid", $sandbox['user_from'], $count);
    foreach ($result as $account) {
      $has_rows = TRUE;
      $new_hash = user_hash_password($account->pass, $hash_count_log2);
      if ($new_hash) {
        // Indicate an updated password.
        $new_hash  = 'U' . $new_hash;
        db_update('users')
          ->fields(array('pass' => $new_hash))
          ->condition('uid', $account->uid)
          ->execute();
      }
    }
    $sandbox['#finished'] = $sandbox['user_from']/$sandbox['user_count'];
    $sandbox['user_from'] += $count;
    if (!$has_rows) {
      $sandbox['#finished'] = 1;
      return t('User passwords rehashed to improve security');
    }
  }
}

/**
 * Remove the 'threshold', 'mode' and 'sort' columns from the {users} table.
 *
 * These fields were previously used to store per-user comment settings.
 */

function user_update_7001() {
  db_drop_field('users', 'threshold');
  db_drop_field('users', 'mode');
  db_drop_field('users', 'sort');
}

/**
 * Convert user time zones from time zone offsets to time zone names.
 */
function user_update_7002(&$sandbox) {
  $sandbox['#finished'] = 0;

  // Multi-part update.
  if (!isset($sandbox['user_from'])) {
    db_change_field('users', 'timezone', 'timezone', array('type' => 'varchar', 'length' => 32, 'not null' => FALSE));
    $sandbox['user_from'] = 0;
    $sandbox['user_count'] = db_query("SELECT COUNT(uid) FROM {users}")->fetchField();
    $sandbox['user_not_migrated'] = 0;
  }
  else {
    $timezones = system_time_zones();
    // Update this many per page load.
    $count = 10000;
    $contributed_date_module = db_field_exists('users', 'timezone_name');
    $contributed_event_module = db_field_exists('users', 'timezone_id');

    $results = db_query_range("SELECT uid FROM {users} ORDER BY uid", $sandbox['user_from'], $count);
    foreach ($results as $account) {
      $timezone = NULL;
      // If the contributed Date module has created a users.timezone_name
      // column, use this data to set each user's time zone.
      if ($contributed_date_module) {
        $date_timezone = db_query("SELECT timezone_name FROM {users} WHERE uid = :uid", array(':uid' => $account->uid))->fetchField();
        if (isset($timezones[$date_timezone])) {
          $timezone = $date_timezone;
        }
      }
      // If the contributed Event module has stored user time zone information
      // use that information to update the user accounts.
      if (!$timezone && $contributed_event_module) {
        try {
          $event_timezone = db_query("SELECT t.name FROM {users} u LEFT JOIN {event_timezones} t ON u.timezone_id = t.timezone WHERE u.uid = :uid", array(':uid' => $account->uid))->fetchField();
          $event_timezone = str_replace(' ', '_', $event_timezone);
          if (isset($timezones[$event_timezone])) {
            $timezone = $event_timezone;
          }
        }
        catch (PDOException $e) {
          // Ignore error if event_timezones table does not exist or unexpected
          // schema found.
        }
      }
      if ($timezone) {
        db_update('users')
          ->fields(array('timezone' => $timezone))
          ->condition('uid', $account->uid)
          ->execute();
      }
      else {
        $sandbox['user_not_migrated']++;
        db_update('users')
          ->fields(array('timezone' => NULL))
          ->condition('uid', $account->uid)
          ->execute();
      }
      $sandbox['user_from']++;
    }

    $sandbox['#finished'] = $sandbox['user_from'] / $sandbox['user_count'];
    if ($sandbox['user_from'] == $sandbox['user_count']) {
      if ($sandbox['user_not_migrated'] > 0) {
        variable_set('empty_timezone_message', 1);
        drupal_set_message('Some user time zones have been emptied and need to be set to the correct values. Use the new ' . l('time zone options', 'admin/config/regional/settings') . ' to choose whether to remind users at login to set the correct time zone.', 'warning');
      }
      return t('Migrated user time zones');
    }
  }
}

/**
 * Update user settings for cancelling user accounts.
 *
 * Prior to 7.x, users were not able to cancel their accounts. When
 * administrators deleted an account, all contents were assigned to uid 0,
 * which is the same as the 'user_cancel_reassign' method now.
 */
function user_update_7003() {
  // Set the default account cancellation method.
  variable_set('user_cancel_method', 'user_cancel_reassign');
  // Re-assign notification setting.
  if ($setting = variable_get('user_mail_status_deleted_notify', FALSE)) {
    variable_set('user_mail_status_canceled_notify', $setting);
    variable_del('user_mail_status_deleted_notify');
  }
  // Re-assign "Account deleted" mail strings to "Account canceled" mail.
  if ($setting = variable_get('user_mail_status_deleted_subject', FALSE)) {
    variable_set('user_mail_status_canceled_subject', $setting);
    variable_del('user_mail_status_deleted_subject');
  }
  if ($setting = variable_get('user_mail_status_deleted_body', FALSE)) {
    variable_set('user_mail_status_canceled_body', $setting);
    variable_del('user_mail_status_deleted_body');
  }
}

/**
 * Add the user's pictures to the {file_managed} table and make them managed
 * files.
 */
function user_update_7004(&$sandbox) {

  $picture_field = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => "Foreign key: {file_managed}.fid of user's picture.",
  );

  if (!isset($sandbox['progress'])) {
    // Check that the field hasn't been updated in an aborted run of this
    // update.
    if (!db_field_exists('users', 'picture_fid')) {
      // Add a new field for the fid.
      db_add_field('users', 'picture_fid', $picture_field);
    }

    // Initialize batch update information.
    $sandbox['progress'] = 0;
    $sandbox['last_user_processed'] = -1;
    $sandbox['max'] = db_query("SELECT COUNT(*) FROM {users} WHERE picture <> ''")->fetchField();
  }

  // As a batch operation move the photos into the {file_managed} table and
  // update the {users} records.
  $limit = 500;
  $result = db_query_range("SELECT uid, picture FROM {users} WHERE picture <> '' AND uid > :uid ORDER BY uid", 0, $limit, array(':uid' => $sandbox['last_user_processed']));
  foreach ($result as $user) {
    // Don't bother adding files that don't exist.
    if (file_exists($user->picture)) {

      // Check if the file already exists.
      $files = file_load_multiple(array(), array('uri' => $user->picture));
      if (count($files)) {
        $file = reset($files);
      }
      else {
        // Create a file object.
        $file = new stdClass();
        $file->uri      = $user->picture;
        $file->filename = basename($file->uri);
        $file->filemime = file_get_mimetype($file->uri);
        $file->uid      = $user->uid;
        $file->status   = FILE_STATUS_PERMANENT;
        $file = file_save($file);
      }

      db_update('users')
        ->fields(array('picture_fid' => $file->fid))
        ->condition('uid', $user->uid)
        ->execute();
    }

    // Update our progress information for the batch update.
    $sandbox['progress']++;
    $sandbox['last_user_processed'] = $user->uid;
  }

  // Indicate our current progress to the batch update system. If there's no
  // max value then there's nothing to update and we're finished.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // When we're finished, drop the old picture field and rename the new one to
  // replace it.
  if (isset($sandbox['#finished']) && $sandbox['#finished'] == 1) {
    db_drop_field('users', 'picture');
    db_change_field('users', 'picture_fid', 'picture', $picture_field);
  }
}

/**
 * Changes the users table to allow longer e-mail addresses.
 */
function user_update_7005(&$sandbox) {
  $mail_field = array(
    'type' => 'varchar',
    'length' => 254,
    'not null' => FALSE,
    'default' => '',
    'description' => "User's e-mail address.",
  );
  $init_field = array(
    'type' => 'varchar',
    'length' => 254,
    'not null' => FALSE,
    'default' => '',
    'description' => 'E-mail address used for initial account creation.',
  );
  db_drop_index('users', 'mail');
  db_change_field('users', 'mail', 'mail', $mail_field, array('indexes' => array('mail' => array('mail'))));
  db_change_field('users', 'init', 'init', $init_field);
}

/**
 * Add module data to {role_permission}.
 */
function user_update_7006(&$sandbox) {
  $module_field = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => "The module declaring the permission.",
  );
  // Check that the field hasn't been updated in an aborted run of this
  // update.
  if (!db_field_exists('role_permission', 'module')) {
    // Add a new field for the fid.
    db_add_field('role_permission', 'module', $module_field);
  }
  $permissions = user_permission_get_modules();
  foreach ($permissions as $key => $value) {
    db_update('role_permission')
      ->fields(array('module' => $value))
      ->condition('permission', $key)
      ->execute();
  }
}

/**
 * Add a weight column to user roles.
 */
function user_update_7007() {
  db_add_field('role', 'weight', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
  db_add_index('role', 'name_weight', array('name', 'weight'));
}

/**
 * If 'user_register' variable was unset in Drupal 6, set it to be the same as
 * the Drupal 6 default setting.
 */
function user_update_7008() {
  if (!isset($GLOBALS['conf']['user_register'])) {
    // Set to the Drupal 6 default, "visitors can create accounts".
    variable_set('user_register', USER_REGISTER_VISITORS);
  }
}

/**
 * Converts fields that store serialized variables from text to blob.
 */
function user_update_7009() {
  $spec = array(
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
  );
  db_change_field('users', 'data', 'data', $spec);
}

/**
 * Update the {user}.signature_format column.
 */
function user_update_7010() {
  // It was previously possible for a value of "0" to be stored in database
  // tables to indicate that a particular piece of text should be filtered
  // using the default text format.
  $default_format = variable_get('filter_default_format', 1);
  db_update('users')
    ->fields(array('signature_format' => $default_format))
    ->condition('signature_format', 0)
    ->execute();
}


/**
 * Updates email templates to use new tokens.
 *
 * This function upgrades customized email templates from the old !token format
 * to the new core tokens format. Additionally, in Drupal 7 we no longer e-mail
 * plain text passwords to users, and there is no token for a plain text
 * password in the new token system. Therefore, it also modifies any saved
 * templates using the old '!password' token such that the token is removed, and
 * displays a warning to users that they may need to go and modify the wording
 * of their templates.
 */
function user_update_7011() {
  $message = '';

  $tokens = array(
    '!site-name-token' => '[site:name]',
    '!site-url-token' => '[site:url]',
    '!user-name-token' => '[user:name]',
    '!user-mail-token' => '[user:mail]',
    '!site-login-url-token' => '[site:login-url]',
    '!site-url-brief-token' => '[site:url-brief]',
    '!user-edit-url-token' => '[user:edit-url]',
    '!user-one-time-login-url-token' => '[user:one-time-login-url]',
    '!user-cancel-url-token' => '[user:cancel-url]',
    '!password' => '',
  );

  $result = db_select('variable', 'v')
    ->fields('v', array('name', 'value'))
    ->condition('value', db_like('user_mail_') . '%', 'LIKE')
    ->execute();

  foreach ($result as $row) {
    if (empty($message) && (strpos($row->value, '!password') !== FALSE)) {
      $message = t('The ability to send users their passwords in plain text has been removed in Drupal 7. Your existing email templates have been modified to remove it. You should <a href="@template-url">review these templates</a> to make sure they read properly.', array('@template-url' => url('admin/config/people/accounts')));
    }

    variable_set($row->name, str_replace(array_keys($tokens), $tokens, $row->value));
  }

  return $message;
}

/**
 * @} End of "defgroup user-updates-6.x-to-7.x"
 * The next series of updates should start at 8000.
 */
