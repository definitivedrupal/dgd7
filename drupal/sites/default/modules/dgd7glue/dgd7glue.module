<?php
/**
 * @file
 *  Site-specific custom code for DefinitiveDrupal.org.
 */

/**
 * Implements hook_boot().
 *
 * Another approach would allow http://example.com/53/edit to work:
 * if (is_numeric(substr($_GET['q'], strpos($_GET['q'], '/')))) {
 *
 * @TODO replace with http://drupal.org/node/933888 when it lands.
 */
function dgd7glue_boot() {
  if (is_numeric($_GET['q'])) {
    $_GET['q'] = 'node/' . $_GET['q'];
  }
}

/**
 * Implements hook_menu().
 */
function dgd7glue_menu() {
  $items['biographies'] = array(
    'title' => 'Author biographies',
    'access arguments' => array('access content'),
    'page callback' => 'dgd7glue_profiles',
  );
  
  return $items;
}

/**
 * Implements hook_node_view().
 */
function dgd7glue_node_view($node, $view_mode, $langcode) {
  // Print prev/next links on Suggestion node pages.
  if ($node->type == 'suggestion' && $view_mode == 'full') {
    $markup = '';
    $next = dgd7glue_nextprev_suggestion($node->nid); 
    $next['text'] = t('Next >');
    $prev = dgd7glue_nextprev_suggestion($node->nid, TRUE); 
    $prev['text'] = t('< Prev');
    $markup .= '<div class="nextprev">';
    $markup .= dgd7glue_format_link($prev);
    $markup .= ' | ';
    $markup .= dgd7glue_format_link($next);
    $markup .= '</div>';
    $node->content['dgd7glue_prevnext'] = array(
      '#markup' => $markup,
      '#weight' => 100,
    );
  }
}

/**
 * Get the next or previous suggestion node nid and title.
 */
function dgd7glue_nextprev_suggestion($nid, $previous = FALSE) {
  // Set the ORDER BY direction and the comparison operator ($co).
  if ($previous) {
    $direction = 'DESC';
    $co = '<';
  }
  else {
    $direction = 'ASC';
    $co = '>';
  }
  return db_query_range("SELECT title, nid FROM {node} WHERE nid $co :nid AND type = :type AND status = :status ORDER BY nid $direction", 0, 1, array(':nid' => $nid, ':type' => 'suggestion', 'status' => 1))->fetchAssoc();
}

/**
 * Format a next/prev link.
 */
function dgd7glue_format_link($link) {
  return l($link['text'], 'node/' . $link['nid'], array('attributes' => array('title' => $link['title'])));
}

/**
 * Implements hook_remarkup_defaults().
 */
function dgd7glue_remarkup_defaults() {
  $rm = array();
  // Define the simple tips-style replacements, machine and human-readable.
  $tips = array(
    'tip' => t('Tip'),
    'note' => t('Note'),
    'hint' => t('Hint'),
    'reality' => t('Reality'),
    'caution' => t('Caution'),
    'gotcha' => t('Gotcha'),
    'new' => t('New in 7'),
  );
  foreach ($tips as $type => $name) {
    $rm['[/' . $type . ']'] = array(
      'before' => '<div class="dgd7-featured dgd7-' . $type . '"><strong class="dgd7-name">' . $name . '</strong>',
      'after' => '</div>',
    );
  }
  // A few rules are unique.
  $rm['[/file-txt]'] = array(
      'before' => '<code>',
      'after' => '</code>',
  );
  // NOTE!  This requires the codefilter module.
  $rm['[/file-php]'] = array(
      'before' => '<?php',
      'after' => '?>',
  );
  $rm['[/cli]'] = array(
    'before' => '<h4>Command-line steps</h4>
    <tt>',
    'after' => '</tt>',
  );
  return $rm;
}

/**
 * Menu callback for listing profile nodes for the Author biographies section.
 */
function dgd7glue_profiles() {
debug($field = field_info_field('field_pagecount'));
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node', '=')
          ->propertyCondition('type', 'profile', '=')
          ->fieldOrderBy('field_pagecount', 'value', 'DESC')
          ->execute();

  return node_view_multiple(node_load_multiple(array_keys($result['node'])), 'teaser');
}
