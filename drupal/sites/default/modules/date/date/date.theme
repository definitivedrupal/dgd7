<?php
// $Id: date.theme,v 1.25 2010/08/13 12:44:45 karens Exp $
/**
 * @file
 * Theme functions.
 */
/**
 * @addtogroup themeable
 * @{
 *
 * Formatter themes
 */
/**
 * Theme from/to date combination in the view.
 * 
 *   $dates['format'] - the format string used on these dates
 *   $dates['value']['local']['object'] - the local date object for the From date
 *   $dates['value2']['local']['object'] - the local date object for the To date
 *   $dates['value']['local']['datetime'] - the datetime value of the From date database (GMT) value
 *   $dates['value2']['local']['datetime'] - the datetime value of the To date database (GMT) value
 *   $dates['value']['formatted'] = formatted From date, i.e. 'February 15, 2007 2:00 pm';
 *   $dates['value']['formatted_date'] - only the date part of the formatted From date
 *   $dates['value']['formatted_time'] - only the time part of the formatted From date
 *   $dates['value2']['formatted'] = formatted To date, i.e. 'February 15, 2007 6:00 pm';
 *   $dates['value2']['formatted_date'] - only the date part of the formatted To date
 *   $dates['value2']['formatted_time'] - only the time part of the formatted To date
 */
function theme_date_display_combination($vars) {
  static $repeating_ids = array();

  $entity_type = $vars['entity_type'];
  $entity      = $vars['entity'];
  $field       = $vars['field'];
  $instance    = $vars['instance'];
  $langcode    = $vars['langcode'];
  $item        = $vars['item'];
  $delta       = $vars['delta'];
  $display     = $vars['display'];
  $field_name  = $field['field_name'];
  $formatter   = $display['type'];
  $options     = $display['settings'];
  $dates       = $vars['dates'];
  $output = '';
    
  // Check the formatter settings to see if the repeat rule should be
  // displayed. Show it only with the first multiple value date.
  if (!in_array($entity->nid, $repeating_ids) && module_exists('date_repeat') 
  && !empty($item['rrule']) && $options['show_repeat_rule'] == 'show') {
    module_load_include('inc', 'date', 'date_repeat');
    $repeat_vars = array(
      'field' => $field, 
      'item' => $item, 
      'entity_type' => $entity_type,
      'entity' => $entity,
    );
    $output .= theme('date_repeat_display', $repeat_vars);
    $repeating_ids[] = $entity->nid;
  }
   
  switch ($options['fromto']) {
    case 'value':
      $date1 = $dates['value']['formatted'];
      $date2 = $date1;
      break;    
    case 'value2':
      $date2 = $dates['value2']['formatted'];
      $date1 = $date2;
      break;
    default:
      $date1 = $dates['value']['formatted'];
      $date2 = $dates['value2']['formatted'];  
      break;
  }
  
  // Pull the timezone, if any, out of the formatted result and tack it
  // back on at the end, if it is in the current formatted date.
  $timezone = $dates['value']['formatted_timezone'];
  if ($timezone) {
    $timezone = ' ' . $timezone;
  }
  $date1 = str_replace($timezone, '', $date1);
  $date2 = str_replace($timezone, '', $date2);
   
  // No date values, display nothing.
  if (empty($date1) && empty($date2)) {
    $output .= '';
  }
  // From and To dates match or there is no To date, display a complete single date.
  elseif ($date1 == $date2 || empty($date2)) {
    $output .= theme('date_display_single', array(
      'date' => $date1, 
      'timezone' => $timezone
    ));
  }
  // Same day, different times, don't repeat the date but show both From and To times.
  elseif (date_has_time($field['settings']['granularity']) && $dates['value']['formatted_date'] == $dates['value2']['formatted_date']) {
    // Replace the original time with the from/to time in the formatted start date.  
    // Make sure that parentheses or brackets wrapping the time will be retained in the
    // final result.
    $time1 = preg_replace('`^([\(\[])`', '', $dates['value']['formatted_time']);
    $time1 = preg_replace('([\)\]]$)', '', $time1);
    $time2 = preg_replace('`^([\(\[])`', '', $dates['value2']['formatted_time']);
    $time2 = preg_replace('([\)\]]$)', '', $time2);
    $time = theme('date_display_range', array('date1' => $time1, 'date2' => $time2));
    $replaced = str_replace($time1, $time, $date1);
    $output .= theme('date_display_single', array('date' => $replaced, 'timezone' => $timezone));
  }
  // Different days, display both in their entirety.
  else {
    $output .= theme('date_display_range', array('date1' => $date1, 'date2' => $date2, 'timezone' => $timezone));
  }
  
  return $output;
}

function theme_date_display_single($vars) {
  $date = $vars['date'];
  $timezone = !empty($vars['timezone']) ? $vars['timezone'] : NULL;
  return '<span class="date-display-single">' . $date . $timezone . '</span>';
}

function theme_date_display_range($vars) {
  $date1 = $vars['date1'];
  $date2 = $vars['date2'];
  $timezone = !empty($vars['timezone']) ? $vars['timezone'] : NULL;
  return '<span class="date-display-start">' . $date1 . '</span>' .
      '<span class="date-display-separator"> - </span>' .
      '<span class="date-display-end">' . $date2 . $timezone. '</span>';
}

/**
 * Theme a format interval for a date element
 *
 *  @param $field = the field settings
 *  @param $entity = node information, this is not always available and not
 *     always the full node, it depends on what value was provided to the formatter.
 *     Only the nid is always guaranteed to be available.
 *  @param $dates - an array of date information, see explanation for date_field_object for details.
 *  @return a formatted display
 *
 */
function theme_date_format_interval($vars) {
  $formatter   = $vars['formatter'];
  $entity_type = $vars['entity_type'];
  $entity      = $vars['entity'];
  $field       = $vars['field'];
  $instance    = $vars['instance'];
  $langcode    = $vars['langcode'];
  $item        = $vars['item'];
  $delta       = $vars['delta'];
  $display     = $vars['display'];
  $field_name  = $field['field_name'];
  $options     = $display['settings'];
  $dates       = $vars['dates'];
    
  // Get the formatter settings, either the default settings for this node
  // type or the View settings stored in $entity->date_info.
  if (!empty($entity->date_info) && !empty($entity->date_info->formatter_settings)) {
    $options = $entity->date_info->formatter_settings;
  }

  $time_ago_vars = array(
    'start_date' => $dates['value']['local']['object'], 
    'end_date' => $dates['value2']['local']['object'],
  );
  return theme('date_time_ago', $time_ago_vars);
}

/**
 * Theme the human-readable description for a Date Repeat rule.
 *
 * TODO -
 * add in ways to store the description in the date so it isn't regenerated
 * over and over and find a way to allow description to be shown or hidden.
 */
function theme_date_repeat_display($vars) {
  $field = $vars['field'];
  $item = $vars['item'];
  $entity = !empty($vars['node']) ? $vars['node'] : NULL;
  $output = '';
  if (!empty($item['rrule'])) {
    $output = date_repeat_rrule_description($item['rrule']);
    $output = '<div>' . $output . '</div>';
  }
  return $output;
}

/**
 * Adjust from/to date format to account for 'all day' .
 *
 * @param array $field, the field definition for this date field.
 * @param string $which, which value to return, 'date1' or 'date2' .
 * @param object $date1, a date/time object for the 'from' date.
 * @param object $date2, a date/time object for the 'to' date.
 * @param string $format
 * @param object $entity, the node this date comes from (may be incomplete, always contains nid).
 * @param object $view, the view this node comes from, if applicable.
 * @return formatted date.
 */
function theme_date_all_day($vars) {
  $field    = $vars['field'];
  $instance = $vars['instance'];
  $which    = $vars['which'];
  $date1    = $vars['date1'];
  $date2    = $vars['date2'];
  $format   = $vars['format'];
  $entity   = $vars['entity'];
  $view     = !empty($vars['view']) ? $vars['view'] : NULL;
  
  if (empty($date1) || !is_object($date1) || $format == 'format_interval') {
    return;
  }
  if (empty($date2)) {
    $date2 = $date1;
  }
  
  $tmp = date_format_order($format);
  $granularity = array_intersect(array_keys(date_granularity_names()), date_format_order($format));
  $granularity = array_pop($granularity);
  
  if (empty($field['settings']['granularity'])) {
    $field['settings']['granularity'] = $tmp;
  }
    
  $increment = isset($instance['widget']['increment']) ? $instance['widget']['increment'] : 1;
  $tmp = date_seconds('s', TRUE, $increment);
  $max_seconds = array_pop($tmp);
  $tmp = date_minutes('i', TRUE, $increment);
  $max_minutes = array_pop($tmp);
  
  switch ($granularity) {
    case 'second':
      $min_comp = date_format($date1, 'H:i:s') == '00:00:00';
      $max_comp = date_format($date2, 'H:i:s') == '00:00:00' || date_format($date2, 'H:i:s') == '23:' . $max_minutes . ':' . $max_seconds;
      break;
    case 'minute':
      $min_comp = date_format($date1, 'H:i') == '00:00';
      $max_comp = date_format($date2, 'H:i:s') == '00:00:00' || date_format($date2, 'H:i') == '23:' . $max_minutes;
      break;
    case 'hour':
      $min_comp = date_format($date1, 'H') == '00';
      $max_comp = date_format($date2, 'H:i:s') == '00:00:00' || date_format($date2, 'H') == '23';
      break;
    default:
      $min_comp = TRUE;
      $max_comp = FALSE;
  }
  
  // Time runs from midnight to the maximum time -- call it 'All day' .
  if (date_has_time($field['settings']['granularity']) && $min_comp && $max_comp) {
    $format = date_limit_format($format, array('year', 'month', 'day'));
    return trim(date_format_date($$which, 'custom', $format) . ' ' . theme('date_all_day_label'));
  }
  // There is no time, use neither 'All day' nor time.
  elseif (!date_has_time($field['settings']['granularity'])) {
    $format = date_limit_format($format, array('year', 'month', 'day'));
    return date_format_date($$which, 'custom', $format);
  }
  // Normal formatting.
  else {
    return date_format_date($$which, 'custom', $format);
  }
}

/**
 * Theme the way an 'all day' label will look.
 */
function theme_date_all_day_label() {
  return '(' . date_t('All day', 'datetime') .')';
}

/**
 *  Theme from/to date combination on form.
 */
function theme_date_combo($vars) {
  $element = $vars['element'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  if (!$field['settings']['todate']) {
    return $element['#children'];
  }

  // Group from/to items together in fieldset.
  $fieldset = array(
    '#title' => check_plain($instance['label']) . ' ' . ($element['#delta'] > 0 ? intval($element['#delta'] + 1) : ''),
    '#value' => '',
    '#description' => $element['#fieldset_description'],
    '#attributes' => array(),
    '#children' => $element['#children'],
  );
  return theme('fieldset', array('element' => $fieldset));
}

/**
 * Display the text/select options for date parts in a table
 * for easier readability.
 */
function theme_date_text_parts($vars) {
  $element = $vars['element'];
  $names = date_granularity_names();
  $rows = array();
  foreach ($names as $key => $part) {
    if ($element[$key]['#type'] == 'hidden') {
      $rows[] = drupal_render($element[$key]);
    }
    else {
      $rows[] = array($names[$key], drupal_render($element[$key][0]), drupal_render($element[$key][1]));
    }
  }
  if ($element['year']['#type'] == 'hidden') {
    return implode($rows) . drupal_render_children($element);
  }
  else {
    $header = array(t('Input Type'), t('Select list'), t('Text field'));
    return theme('table', array('header' => $header, 'rows' => $rows)) . drupal_render_children($element);
  }
}

/** @} End of addtogroup themeable */