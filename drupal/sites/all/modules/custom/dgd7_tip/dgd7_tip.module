<?php
// $Id$

/**
 * @file
 * This module provides an input filter which can be used in text formats to
 * allow users to use simple "[tip] Here's a tip! [/tip]"-style notation to
 * emphasize tips, notes, hints, and other paragraphs of text as specially
 * formatted, featured text.
 */

/**
 * Implements hook_filter_info().
 */
function dgd7_tip_filter_info() {
  $filters['dgd7_tip'] = array(
    'title' => t('Custom markup'),
    'description' => t('Allows simple notation to indicate paragraphs of text to be wrapped in custom markup, for instance to emphasize tips, notes, or other featured interjections.'),
//    'prepare callback' => '_dgd7_tip_prepare',
    'process callback' => '_dgd7_tip_process',
    // Allow other modules to declare default tag replacement filters.
    'default settings' => array(
      'rt' => module_invoke_all('dgd7_tip_rt_defaults'),
    ),
    'settings callback' => '_dgd7_tip_settings',
    'tips callback' => '_dgd7_tip_tips',
  );
  return $filters;
}

/**
 * Implements hook_theme().
 */
function dgd7_tip_theme() {
  return array(
    'dgd7_tip_settings' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_dgd7_tip_rt_defaults().
 */
function dgd7_tip_dgd7_tip_rt_defaults() {
  $rt = array();
  $rt['[/tip]'] = array(
    'before' => '<div class="featured-element tip"><span class="featured-name"><span class="leading-square">T</span>ip</span>',
    'after' => '</div>',
  );
  return $rt;
}

/**
 * Filter prepare callback.
 */
function _dgd7_tip_prepare() {

}

/**
 * Process callback for tag filter.
 */
function _dgd7_tip_process($text, $format) {
  if (!isset($format->settings['rt']) || !is_array($format->settings['rt'])) {
    return $text;
  }
  foreach ($format->settings['rt'] as $ctag => $replace) {
    dgd7_tip_replace_tags($text, $ctag, $replace['before'], $replace['after']);
  }
  return $text;
}

/**
 * Tips callback for tag filter.
 */
function _dgd7_tip_tips($format, $long = FALSE) {
  $tips = '';
  if (!isset($format->settings['rt']) || !is_array($format->settings['rt'])) {
    if (user_access('administer filters')) {
      $tips .= '<p class="warning">' . t('No custom markup tag replacement defined.') . '</p>';
    }
  }
  elseif ($long) {
    $tips .= '<ul>';
    foreach ($format->settings['rt'] as $tag => $replace) {
      $tips .= '<li>';
      $tips .= '<code>' . check_plain($tag) . '</code> becomes ';
      $tips .= '<code>' . check_plain($replace['before']) . '</code> and ';
      $tips .= '<code>' . check_plain($replace['after']) . '</code>.';
      $tips .= '</li>';
    }
    $tips .= '</ul>';
  }
  else {
    t(' tags are replaced with before and after markup.');
  }
  if (user_access('administer filters')) {
    $tips .= ' ' . l(t('Configure format.'), 'admin/config/content/formats/' . $format->format);
  }
  return $tips;
}

/**
 * Settings callback for tag filter.
 *
 */
function _dgd7_tip_settings($form, $form_state, $filter, $format, $defaults) {
  // Declare the array will hold our settings form elements.
  $settings = array();
  $rt = $defaults['rt']; // "rt" is short for replacement tags.
  // Administrator-set settings override the default settings.
  if (isset($filter->settings['rt'])) {
    $rt = array_merge($rt, $filter->settings['rt']);
  }

  $settings['rt'] = array(
    '#description' => t('To set tags and replacement markup, enter only the closing tag (such as &lt;/tip&gt;); the opening tag will be calculated automatically by removing the slash.  Then enter the before and after markup which will replace the opening and closing tag, respectively.'),
    '#theme' => 'dgd7_tip_settings',
    '#format' => $format,
    '#parents' => array('filters', 'dgd7_tip', 'settings'),
    '#element_validate' => array('dgd7_tip_rt_form_keys_validate'),
  );
  $i = 0;
  foreach ($rt as $tag => $replace) {
    _dgd7_tip_add_rt_formset($settings, $i, $tag, $replace);
    $i++; // Increment our number of filters by one.
  }
  // Always add two empty sets of form fields to be filled in.
  $total = $i+2;
  for ($i; $i < $total; $i++) {
    _dgd7_tip_add_rt_formset($settings, $i);
  }
  return $settings;
}

/**
 * Add a set of form fields for adding a new tag and replacement markup pair.
 */
function _dgd7_tip_add_rt_formset(&$settings, $i, $tag = '', $replace = array('before' => '', 'after' => '')) {
  drupal_add_css(drupal_get_path('module', 'dgd7_tip') . '/dgd7_tip.css');
  $settings['rt'][$i]['tag'] = array(
    '#prefix' => '<div class="rt-formset">',
    '#type' => 'textfield',
    '#title' => t('Tag'),
    '#maxlength' => 64,
    '#size' => 10,
    '#default_value' => $tag,
    '#element_validate' => array('dgd7_tip_rt_form_tag_validate'),
  );
  $settings['rt'][$i]['before'] = array(
    '#type' => 'textfield',
    '#title' => t('Before'),
    '#maxlength' => 1024,
    '#size' => 40,
    '#default_value' => $replace['before'],
  );
  $settings['rt'][$i]['after'] = array(
    '#type' => 'textfield',
    '#title' => t('After'),
    '#maxlength' => 1024,
    '#size' => 40,
    '#default_value' => $replace['after'],
    '#suffix' => '</div>',
  );
}

/**
 * Validate each tag to include one and only one slash.
 */
function dgd7_tip_rt_form_tag_validate($element, &$form_state, $whole_form) {
  if (strlen($element['#value']) && substr_count($element['#value'], '/') !== 1) {
    // We describe where the error is because after submission it is likely to
    // be in a non-visible verticle tab.
    form_error($element, t('In the Custom markup Filter settings, each tag must be in the form of a closing tag with exactly one slash ("/").  The opening tag is calculated by removing the slash.'));
  }
}

/**
 * Rearrange form elements to be keyed by tag before filter_format_save() runs.
 */
function dgd7_tip_rt_form_keys_validate($element, &$form_state) {
  $rt = array();
  // Create a tag-keyed version of each element.
  foreach ($element as $i => $value) {
    // Strip out non-value form elements (our form has numbers).
    if (!is_numeric($i))  continue;
    $key = $value['tag']['#value'];
    // Do not save empty keys.
    if (!$key) continue;
    $rt[$key] = array(
      'before' => $value['before']['#value'],
      'after' => $value['after']['#value'],
    );
  }

  form_set_value($element, array('rt' => $rt), $form_state);
}

/**
 * Replace with tags with markup given a closing tag (containing a /).
 *
 * @param $text
 *   String to be modified to use markup in place of tags, passed by reference.
 * @param $ctag
 *   A closing tag, identical to the opening tag except it includes a /.
 * @param $before
 *   Markup to replace the opening tag.
 * @param $after
 *   Markup to replace the closing tag.
 * @return NULL 
 */
function dgd7_tip_replace_tags(&$text, $ctag, $before = '', $after = '') {
  $otag = dgd7_tip_otag($ctag);
  $text = preg_replace(
    '@' . preg_quote($otag) . '(.+?)' . preg_quote($ctag) . '@se',
    "dgd7_tip_replace_tag('$1', '$before', '$after')",
    $text
  );
}

/**
 * Place open before and after markup around an excerpt.
 */
function dgd7_tip_replace_tag($excerpt, $before, $after) {
  return $before . $excerpt . $after;
}

/**
 * Theme callback to print description with settings form.
 */
function theme_dgd7_tip_settings($vars) {
  $form = $vars['form'];
  return '<p>' . filter_xss_admin($form['#description']) . '</p>'
         . drupal_render_children($form);
}

/**
 * Take a closing tag and strip the slash to present the opening tag.
 */
function dgd7_tip_otag($ctag) {
  return str_replace('/', '', $ctag);
}
