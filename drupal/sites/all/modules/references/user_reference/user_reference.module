<?php

/**
 * @file
 * Defines a field type for referencing a user from a node.
 */

/**
 * Implements hook_menu().
 */
function user_reference_menu() {
  $items = array();
  $items['user_reference/autocomplete'] = array(
    'title' => 'user_reference autocomplete',
    'page callback' => 'user_reference_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function user_reference_field_info() {
  return array(
    'user_reference' => array(
      'label' => t('User reference'),
      'description' => t('This field stores the ID of a related user as an integer value.'),
      'settings' => array('referenceable_roles' => array(), 'referenceable_status' => array()),
      'default_widget' => 'user_reference_autocomplete',
      'default_formatter' => 'user_reference_default',
      // Support hook_entity_property_info() from contrib "Entity API".
      'property_type' => 'node',
    ),
  );
}

/**
 * Implements hook_field_schema();
 */
function user_reference_field_schema($field) {
  $columns = array(
    'uid' => array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array('uid' => array('uid')),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function user_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();
  $form['referenceable_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User roles that can be referenced'),
    '#default_value' => is_array($settings['referenceable_roles'])
       ? array_filter($settings['referenceable_roles'])
       : array(),
    '#options' => user_roles(TRUE),
  );
  $form['referenceable_status'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User status that can be referenced'),
    '#default_value' => is_array($settings['referenceable_status'])
      ? array_filter($settings['referenceable_status'])
      : array(1),
    '#options' => array(1 => t('Active'), 0 => t('Blocked')),
  );
  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_uid': uid is not valid for the field (not a valid user id, or the user is not referenceable).
 */
function user_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Extract uids to check.
  $ids = array();

  // First check non-numeric uid's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['uid'])) {
      if (is_numeric($item['uid'])) {
        $ids[] = $item['uid'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_uid',
          'message' => t('%name: invalid input.',
            array('%name' => $instance['label'])),
        );
      }
    }
  }
  // Prevent performance hog if there are no ids to check.
  if ($ids) {
    $refs = _user_reference_potential_references($field, '', NULL, $ids);
    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['uid']) && !isset($refs[$item['uid']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_uid',
            'message' => t("%name: this user can't be referenced.",
              array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function user_reference_field_is_empty($item, $field) {
  return empty($item['uid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function user_reference_field_formatter_info() {
  return array(
    'user_reference_default' => array(
      'label' => t('Default'),
      'description' => t("Display the name of the referenced user as a link to the user's profile page."),
      'field types' => array('user_reference'),
    ),
    'user_reference_plain' => array(
      'label' => t('Plain text'),
      'description' => t('Display the name of the referenced user as plain text.'),
      'field types' => array('user_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function user_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // @todo Optimisation: use hook_field_formatter_prepare_view() to load
  // user names or full user entities in 'multiple' mode.

  // Collect the list of user ids.
  $uids = array();
  foreach ($items as $delta => $item) {
    $uids[$item['uid']] = $item['uid'];
  }

  switch ($display['type']) {
    case 'user_reference_default':
    case 'user_reference_plain':
      $titles = _user_reference_get_user_names($uids);
      foreach ($items as $delta => $item) {
        if ($display['type'] == 'user_reference_default') {
          $result[$delta] = array(
            '#type' => 'link',
            '#title' => $titles[$item['uid']],
            '#href' => 'user/' . $item['uid'],
          );
        }
        else {
          $result[$delta] = array(
            '#markup' => check_plain($titles[$item['uid']]),
          );
        }
      }
      break;
  }

  return $result;
}

/**
 * Helper function for widgets and formatters.
 *
 * Store user names collected in the curent request.
 */
function _user_reference_get_user_names($uids, $known_titles = array()) {
  $titles = &drupal_static(__FUNCTION__, array());

  // Save titles we receive.
  $titles += $known_titles;

  // Collect nids to retrieve from database.
  $uids_query = array();
  foreach ($uids as $uid) {
    if (!isset($titles[$uid])) {
      $uids_query[] = $uid;
    }
  }
  if ($uids_query) {
    $query = db_select('users', 'u')
      ->fields('u', array('uid', 'name'))
      ->condition('u.uid', $uids);
    $titles += $query->execute()->fetchAllKeyed();
  }

  // Build the results array.
  $return = array();
  foreach ($uids as $uid) {
    $return[$uid] = isset($titles[$uid]) ? $titles[$uid] : '';
  }

  return $return;
}

/**
 * Implements hook_field_widget_info().
 */
function user_reference_field_widget_info() {
  return array(
    'user_reference_autocomplete' => array(
      'label' => t('Autocomplete text field'),
      'description' => t('Display the list of referenceable users as a textfield with autocomplete behaviour.'),
      'field types' => array('user_reference'),
      'settings' => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        'autocomplete_path' => 'user_reference/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function user_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'user_reference';
  $info['options_buttons']['field types'][] = 'user_reference';
}

/**
 * Implements hook_field_widget_settings_form().
 */
function user_reference_field_widget_settings_form($field, $instance) {
  $widget   = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  if ($widget['type'] == 'user_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type'             => 'select',
      '#title'            => t('Autocomplete matching'),
      '#default_value'    => $settings['autocomplete_match'],
      '#options'          => array(
        'starts_with'     => t('Starts with'),
        'contains'        => t('Contains'),
      ),
      '#description'      => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of users.'),
    );
    $form['size'] = array(
      '#type'             => 'textfield',
      '#title'            => t('Size of textfield'),
      '#default_value'    => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required'         => TRUE,
    );
  }
 return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function user_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'user_reference_autocomplete':
      $element += array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['uid']) ? $items[$delta]['uid'] : NULL,
        '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $field['field_name'],
        '#size' => $instance['widget']['settings']['size'],
        '#element_validate' => array('user_reference_autocomplete_validate'),
        '#value_callback' => 'user_reference_autocomplete_value',
      );
      break;
  }
  return array('uid' => $element);
}

/**
 * Value callback for a user_reference autocomplete element.
 *
 * Substitute in the user name for the uid.
 */
function user_reference_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw uid into
    // "user name [uid:n]".
    $uid = $element['#default_value'];
    if (!empty($uid)) {
      $q = db_select('users', 'u');
      $q->addField('u', 'name');

      $q->condition('u.uid', $uid)
        ->range(0, 1);
      $result = $q->execute();
      // @todo If no result (user doesn't exist).
      $value = $result->fetchField();
      $value .= ' [uid:' . $uid . ']';
      return $value;
    }
  }
}

/**
 * Validation callback for a user_reference autocomplete element.
 */
function user_reference_autocomplete_validate($element, &$form_state, $form) {
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $instance = $form_state['field'][$element['#field_name']][$element['#language']]['instance'];

  $value = $element['#value'];
  $uid = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[uid:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*uid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit uid. Check that the 'name' part matches the actual name for
      // the uid.
      list(, $name, $uid) = $matches;
      if (!empty($name)) {
        $names = _user_reference_get_user_names(array($uid));
        if ($name != $names[$uid]) {
          form_error($element, t('%name: name mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      // No explicit uid (the submitted value was not populated by autocomplete
      // selection). Get the uid of a referencable user from the entered name.
      $reference = _user_reference_potential_references($field, $value, 'equals', NULL, 1);
      if ($reference) {
        // @todo The best thing would be to present the user with an
        // additional form, allowing the user to choose between valid
        // candidates with the same name. ATM, we pick the first
        // matching candidate...
        $uid = key($reference);
      }
      else {
        form_error($element, t('%name: found no valid user with that name.', array('%name' => $instance['label'])));
      }
    }
  }

  // Set the element's value as the user id that was extracted from the entered
  // input.
  form_set_value($element, $uid, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function user_reference_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['uid'], $error['message']);
}

/**
 * Builds a list of referenceable users suitable for the '#option' FAPI property.
 *
 * Warning: the function does NOT take care of encoding or escaping the user
 * names. Proper massaging needs to be performed by the caller, according to
 * the destination FAPI '#type' (radios / checkboxes / select).
 *
 * @param $field
 *   The field definition.
 *
 * @return
 *   An array of referenceable user names, keyed by user id.
 */
function _user_reference_options($field) {
  $references = _user_reference_potential_references($field);

  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = $value['title'];
  }

  return $options;
}

/**
 * Fetch an array of all candidate referenced users.
 *
 * This info is used in various places (aloowed values, autocomplete results,
 * input validation...). Some of them only need the uids, others nid + names,
 * others yet uid + names + rendered row (for display in widgets).
 * The array we return contains all the potentially needed information, and lets
 * consumers use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter usernames on (used by autocomplete)
 * @param $match
 *   Operator to match filtered name against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional user ids to lookup (the $string and $match arguments will be
 *   ignored).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid users in the form:
 *   array(
 *     uid => array(
 *       'title' => The user name,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function _user_reference_potential_references($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $match . ':'
    . ($string !== '' ? $string : implode('-', $ids))
    . ':' . $limit;
  if (!isset($results[$cid])) {
    $references = _user_reference_potential_references_standard($field, $string, $match, $ids, $limit);

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * Helper function for _user_reference_potential_references().
 *
 * List of referenceable users defined by user role and status.
 */
function _user_reference_potential_references_standard($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  // Avoid useless work.
  $filter_roles = array_filter($field['settings']['referenceable_roles']);
  $filter_status = array_filter($field['settings']['referenceable_status']);
  if (!count($filter_status) && !count($filter_roles)) {
    return array();
  }

  $query = db_select('users', 'u')
    ->addMetaData('id', ' _user_reference_potential_references_standard')
    // Select the whole record, so that format_username() has enough
    // information.
    ->fields('u');

  // Enable this filter only if any statuses checked (and not both).
  if (count($filter_status) == 1) {
    $query->condition('u.status', array_keys($filter_status), 'IN');
  }

  // Skip filter when "authenticated user" choosen.
  if ($filter_roles && !isset($filter_roles[DRUPAL_AUTHENTICATED_RID])) {
    $query->join('users_roles', 'r', 'u.uid = r.uid');
    $query->condition('r.rid', array_keys($filter_roles), 'IN');
  }

  if ($string !== '') {
    $args = array();
    switch ($match) {
      case 'contains':
        $query->condition('u.name', '%' . $string . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('u.name', $string . '%', 'LIKE');
        break;

      case 'equals':
      default: // no match type or incorrect match type: use "="
        $query->condition('u.name', $string, '=');
        break;
    }
  }
  elseif ($ids) {
    $query->condition('u.uid', $ids, 'IN');
  }

  // Explicitly exclude the anonymous user.
  $query->condition('u.uid', 0, '<>');

  if ($limit) {
    $query->range(0, $limit);
  }
  $query->orderBy('u.name');

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $account) {
    $references[$account->uid] = array(
      'title'    => $account->name,
      'rendered' => check_plain(format_username($account)),
    );
  }
  return $references;
}

/**
 * Menu callback; Retrieve a pipe delimited string of autocomplete suggestions for existing users
 */
function user_reference_autocomplete($field_name, $string = '') {
  $field = field_info_field($field_name);

  $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
  $matches = array();

  $references = _user_reference_potential_references($field, $string, $match, array(), 10);
  foreach ($references as $id => $row) {
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] . " [uid:$id]"] = '<div class="reference-autocomplete">' . $row['rendered'] . '</div>';
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_options_list().
 */
function user_reference_options_list($field) {
  return _user_reference_options($field);
}

/**
 * Implementation of hook_user_load().
 */
/*function user_reference_user_load($accounts) {

  // Only add links if we are on the user 'view' page.
  if (arg(0) != 'user' || arg(2)) {
    return;
  }

  foreach ($accounts as $uid => $account) {

    // find CCK user_reference field tables
    // search through them for matching user ids and load those nodes
    $additions = array();
    $fields = field_info_instances('user');

    // TODO : replace with field_attach_query() + synchronize with latest D6 code.

    // Find the table and columns to search through, if the same
    // table comes up in more than one field type, we only need
    // to search it once.
    $search_tables = array();
    $search_links = array();
    foreach ($fields as $field) {
      if ($field['type'] == 'user_reference' && !empty($field['widget']['reverse_link'])) {
        $db_info = content_database_info($field);
        $search_tables[$db_info['table']] = $db_info['columns']['uid']['column'];
        $search_links[$db_info['table']] = $field['widget']['reverse_link'];
      }
    }
    foreach ($search_tables as $table => $column) {
      $ids = db_query(db_rewrite_sql("SELECT DISTINCT(n.nid) FROM {node} n LEFT JOIN {". $table ."} f ON n.vid = f.vid WHERE f.". $column ."=". $account->uid. " AND n.status = 1"));
      while ($data = db_fetch_object($ids)) {
        // TODO, do we really want a complete node_load() here? We only need the title to create a link.
        $node = node_load($data->nid);
        $node->reverse_link = $search_links[$table];
        $additions[$node->type][] = $node;
      }
    }
    $accounts[$uid]->user_reference = $additions;
  }
  return;
}*/

/**
 * Implementation of hook_user_view().
 */
/*function user_reference_user_view($account, $view_mode, $langcode) {
  if (!empty($account->user_reference)) {
    $node_types = content_types();
    $additions = array();
    $values = array();
    foreach ($account->user_reference as $node_type => $nodes) {
      foreach ($nodes as $node) {
        if ($node->reverse_link) {
          $values[$node_type][] = l($node->title, 'node/' . $node->nid);
        }
      }
      if (isset($values[$node_type])) {
        $additions[] = array(
          '#type' => 'user_profile_item',
          '#title' => check_plain($node_types[$node_type]['name']),
          '#value' => theme('item_list', $values[$node_type]),
        );
      }
    }
    if ($additions) {
      $account->content['user_reference'] = $additions + array(
        '#type' => 'user_profile_category',
        '#attributes' => array('class' => array('user-member')),
        '#title' => t('Related content'),
        '#weight' => 10,
      );
    }
  }
}*/

/**
 * Implements hook_content_migrate_field_alter().
 *
 * Use this to tweak the conversion of field settings
 * from the D6 style to the D7 style for specific
 * situations not handled by basic conversion,
 * as when field types or settings are changed.
 *
 * $field_value['widget_type'] is available to
 * see what widget type was originally used.
 */
function user_reference_content_migrate_field_alter(&$field_value, $instance_value) {
  switch ($field_value['module']) {
    case 'userreference':
      $field_value['module'] = 'user_reference';
      $field_value['type'] = 'user_reference';
      break;
  }
}

/**
 * Implements hook_content_migrate_instance_alter().
 *
 * Use this to tweak the conversion of instance or widget settings
 * from the D6 style to the D7 style for specific
 * situations not handled by basic conversion, as when
 * formatter or widget names or settings are changed.
 */
function user_reference_content_migrate_instance_alter(&$instance_value, $field_value) {
  // The module name for the instance was corrected
  // by the change in user_reference_content_migrate_field_alter().
  switch ($field_value['type']) {
    case 'userreference':
      // The formatter names changed, all are prefixed
      // with 'user_reference_'.
      foreach ($instance_value['display'] as $context => $settings) {
        $instance_value['display'][$context]['type'] = 'user_reference_' . $settings['type'];
      }
      // Massage the widget.
      switch ($instance_value['widget']['type']) {
        case 'userreference_autocomplete':
          $instance_value['widget']['type'] = 'user_reference_autocomplete';
          $instance_value['widget']['module'] = 'user_reference';
          break;
        case 'userreference_select':
          $instance_value['widget']['type'] = 'options_select';
          $instance_value['widget']['module'] = 'options';
          break;
        case 'userreference_buttons':
          $instance_value['widget']['type'] = 'options_buttons';
          $instance_value['widget']['module'] = 'options';
      }
      break;
  }
}

/**
 * Implements hook_field_views_data().
 *
 * In addition to the default field information we add the relationship for
 * views to connect back to the users table.
 */
function user_reference_field_views_data($field) {
  // No module_load_include(): this hook is invoked from
  // views/modules/field.views.inc, which is where that function is defined.
  $data = field_views_field_default_views_data($field);

  $storage = $field['storage']['details']['sql'];

  foreach ($storage as $age => $table_data) {
    $table = key($table_data);
    $columns = current($table_data);
    $id_column = $columns['uid'];
    if (isset($data[$table])) {
      // Filter: swap the handler to the 'in' operator. The callback receives
      // the field name instead of the whole $field structure to keep views
      // data to a reasonable size.
      $data[$table][$id_column]['filter']['handler'] = 'views_handler_filter_in_operator';
      $data[$table][$id_column]['filter']['options callback'] = 'user_reference_views_filter_options';
      $data[$table][$id_column]['filter']['options arguments'] = array($field['field_name']);

      // Argument: display users.name in argument titles (handled in our custom
      // handler) and summary lists (handled by the base views_handler_argument
      // handler).
      // Both mechanisms rely on the 'name table' and 'name field' information
      // below, by joining to a separate copy of the base table from the field
      // data table.
      $data[$table][$id_column]['argument']['handler'] = 'references_handler_argument';
      $data[$table][$id_column]['argument']['name table'] = $table . '_reference';
      $data[$table][$id_column]['argument']['name field'] = 'name';
      $data[$table . '_reference']['table']['join'][$table] = array(
        'left_field' => $id_column,
        'table' => 'users',
        'field' => 'uid',
      );

      // Relationship.
      $data[$table][$id_column]['relationship'] = array(
        'handler' => 'references_handler_relationship',
        'base' => 'users',
        'field' => 'uid',
        'base field' => 'uid',
        'label' => $field['field_name'],
        'field_name' => $field['field_name'],
      );
    }
  }

  return $data;
}

/**
 * Helper callback for the views_handler_filter_in_operator filter.
 *
 * @param $field_name
 *   The field name.
 *
 * @return
 *   The array of allowed options for the filter.
 */
function user_reference_views_filter_options($field_name) {
  if ($field = field_info_field($field_name)) {
    return _user_reference_options($field);
  }
  return array();
}
