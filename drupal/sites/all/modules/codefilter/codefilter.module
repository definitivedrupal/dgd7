<?php
/**
 * Implement hook_init().
 *
 * Adds the codefilter stylesheet to the page
 */
function codefilter_init() {
  drupal_add_css(drupal_get_path('module', 'codefilter') .'/codefilter.css');
}

/**
 * Processes chunks of escaped PHP code into HTML.
 */
function codefilter_process_php($text) {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  // Undo possible linebreak filter conversion
  $text = preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text));
  // Undo the escaping in the prepare step
  $text = decode_entities($text);
  // Trim leading and trailing linebreaks
  $text = trim($text, "\r\n");
  // Highlight as PHP
  $text = '<div class="codeblock">'. highlight_string("<?php\n$text\n?>", 1) .'</div>';
  // Remove newlines to avoid clashing with the linebreak filter
  $text = str_replace("\n", '', $text);
  return codefilter_fix_spaces($text);
}

/**
 * Callback to replace content of the <?php ?> elements.
 */
function _codefilter_process_php_callback($matches) {
  return codefilter_process_php($matches[1]);
}

/**
 * Helper function for codefilter_process_code().
 */
function codefilter_process_php_inline($matches) {
  // Undo nl2br
  $text = str_replace('<br />', '', $matches[0]);
  // Decode entities (the highlighter re-entifies) and highlight text
  $text = highlight_string(decode_entities($text), 1);
  // Remove PHP's own added code tags
  $text = str_replace(array('<code>', '</code>', "\n"), array('', '', ''), $text);
  return $text;
}

/**
 * Processes chunks of escaped code into HTML.
 */
function codefilter_process_code($text) {
  // Undo linebreak escaping
  $text = str_replace('&#10;', "\n", $text);
  // Inline or block level piece?
  $multiline = strpos($text, "\n") !== FALSE;
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  $text = preg_replace("/^\n/", '', preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text)));
  // Trim leading and trailing linebreaks
  $text = trim($text, "\n");
  // Escape newlines
  $text = nl2br($text);

  // PHP code in regular code
  $text = preg_replace_callback('/&lt;\?php.+?\?&gt;/s', 'codefilter_process_php_inline', $text);

  $text = '<code>'. codefilter_fix_spaces(str_replace(' ', '&nbsp;', $text)) .'</code>';
  if ($multiline) $text = '<div class="codeblock">'. $text .'</div>';
  // Remove newlines to avoid clashing with the linebreak filter
  return str_replace("\n", '', $text);
}

/**
 * Callback to replace content of the <code> elements.
 */
function _codefilter_process_code_callback($matches) {
  return codefilter_process_code($matches[1]);
}

function codefilter_fix_spaces($text) {
  return preg_replace('@&nbsp;(?!&nbsp;)@', ' ', $text);
}

/**
 * Escape code blocks during input filter 'prepare'.
 *
 * @param $text
 *   The string to escape.
 * @param $type
 *   The type of code block, either 'code' or 'php'.
 * @return
 *   The escaped string.
 */
function codefilter_escape($text, $type = 'code') {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  $text = check_plain(str_replace('\"', '"', $text));

  // Protect newlines from line break converter
  $text = str_replace(array("\r", "\n"), array('', '&#10;'), $text);

  // Add codefilter escape tags
  $text = "[codefilter_$type]{$text}[/codefilter_$type]";

  return $text;
}

/**
 * Callback to escape content of <code> elements.
 */
function _codefilter_escape_code_tag_callback($matches) {
  return codefilter_escape($matches[1], 'code');
}

/**
 * Callback to escape content of <?php ?>, [?php ?], <% %>, and [% %] elements.
 */
function _codefilter_escape_php_tag_callback($matches) {
  return codefilter_escape($matches[2], 'php');
}

/**
 * Implement hook_filter_info().
 */
function codefilter_filter_info() {
  $filters['codefilter'] = array(
    'title' => t('Code filter'),
    'description' => t('Allows users to post code verbatim using &lt;code&gt; and &lt;?php ?&gt; tags.'),
    'prepare callback' => '_codefilter_prepare',
    'process callback' => '_codefilter_process',
    'tips callback' => '_codefilter_tips',
  );
  return $filters;
}

function _codefilter_prepare($text, $format) {
  /* Note: we replace <code> </code>, <?php ?>, [?php ?], <% %>, and [% %]
     to prevent other filters from acting on them. */
  $text = preg_replace_callback('@<code>(.+?)</code>@s', '_codefilter_escape_code_tag_callback', $text);
  $text = preg_replace_callback('@[\[<](\?php|%)(.+?)(\?|%)[\]>]@s', '_codefilter_escape_php_tag_callback', $text);
  return $text;
}

function _codefilter_process($text, $format) {
  $text = preg_replace_callback('@\[codefilter_code\](.+?)\[/codefilter_code\]@s', '_codefilter_process_code_callback', $text);
  $text = preg_replace_callback('@\[codefilter_php\](.+?)\[/codefilter_php\]@s', '_codefilter_process_php_callback', $text);
  return $text;
}

function _codefilter_tips($format, $long = FALSE) {
  if ($long) {
    return t('To post pieces of code, surround them with &lt;code&gt;...&lt;/code&gt; tags. For PHP code, you can use &lt;?php ... ?&gt;, which will also colour it based on syntax.');
  }
  else {
    return t('You may post code using &lt;code&gt;...&lt;/code&gt; (generic) or &lt;?php ... ?&gt; (highlighted PHP) tags.');
  }
}
